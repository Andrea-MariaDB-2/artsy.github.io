<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/team/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2021-02-04T16:19:47+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. ðŸ˜± For many
teams this led to batching code reviews or even skipping them altogether. ðŸ˜±ðŸ˜±</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it's convenient for the reviewer:
asynchronously. Asynchronous communication isn't all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->


<p>When you're in a synchronous conversation with someone, it doesn't take much time for them to let you know you've
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it's
convenient for me, you ask a clarifying question when it's convenient for you, I respond when it's convenient for
me, etc. Suddenly my PR has been open for three days and we haven't yet made it to a common understanding of why
I've made these changes.</p>

<p>It's extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I'm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<a name="Explain.Your.Reasoning"></a>
<h2>Explain Your Reasoning</h2>

<p>You've been thinking a lot about the problem you're solving - probably significantly more than your reviewers.
You'll save everyone time by describing the problem and sharing how you're thinking about it.</p>

<a name="Define.the.problem.and.solution"></a>
<h3>Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you've missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<a name="Explain.interesting.lines.of.code"></a>
<h3>Explain interesting lines of code</h3>

<p>The reviewers aren't the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren't obvious.</p>

<a name="Give.a.guided.tour.of.the.changes"></a>
<h3>Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It's like he's sitting next to you!</p>

<a name="Show.Your.Work"></a>
<h2>Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you've worked through this problem thoroughly, and you've
brought receipts.</p>

<a name="Make.small..self-contained.commits"></a>
<h3>Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here's a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<a name="Demonstrate.the.results"></a>
<h3>Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too ðŸ˜¬). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you've verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here's a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she's made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<a name="Document.the.unseen"></a>
<h3>Document the unseen</h3>

<p>Sometimes a PR's changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here's a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what's happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<a name="Share.your.progress"></a>
<h3>Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they're "done". If
there are changes you'd like to get people's eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code>WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn't complete. As you continue your work, use a <code>TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it's merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<a name="Spread.knowledge"></a>
<h2>Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren't just about collecting feedback from the reviewer. They're also
an opportunity to spread knowledge from the author.</p>

<a name="Share.your.learnings"></a>
<h3>Share your learnings</h3>

<p>Maybe you learned some things about the system you're working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<a name="Share.development.tips"></a>
<h3>Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you'd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">"Engineer workflow" playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you've got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="https://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->


<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they'd see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We're able to build deeper team identity. We've found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<a name="How.did.team.working.agreements.come.about.at.Artsy."></a>
<h2>How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it's also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets,
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside></p>

<p>Since being pioneered by Adam's team, team working agreements have spread to most of our engineering teams. They've
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<a name="What.s.a.team.working.agreement."></a>
<h2>What's a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the "forming" stage will
quickly uncover areas of disagreement and move to "storming" when they attempt to align on a working agreement. A
"storming" team might move to "norming" more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
<li>Any change to the sprint backlog requires product manager approval.</li>
<li>Everyone owns the backlog and should add tickets for untracked work.</li>
<li>Update the backlog before each dayâ€™s standup.</li>
</ul>


<p>We've been using a fairly consistent process to develop team working agreements at Artsy.</p>

<a name="Step.1:.Educate.the.team.about.team.working.agreements"></a>
<h3>Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<a name="Step.2:.Conduct.a.brainstorming.meeting"></a>
<h3>Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It's vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone's voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<a name="Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits"></a>
<h3>Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<a name="Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document"></a>
<h3>Step 4: Commit the most important habits to a "Team Working Agreement" document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It's not done, though. Remember: it's a living document.</p>

<a name="Step.5:.Revisit.the.working.agreement"></a>
<h3>Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what "revisiting the agreement" means. When
should we amend it? When should we do another brainstorm? It probably doesn't make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<a name="Why.establish.a.team.working.agreement."></a>
<h2>Why establish a team working agreement?</h2>

<a name="The.brainstorm.itself.is.incredibly.valuable."></a>
<h3>The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they're
doing. It's similar to what you might get out of a retro but at a higher level. It offers time to discuss "soft"
skills that you don't often discuss, in a context that you don't usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a <a href="https://www.youtube.com/watch?v=FxTXf6qyaGk">great talk by Katherine Wu named "Ask vs Guess Culture"</a>.
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to <em>ask</em> your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of <em>the actual brainstorm</em> than the working agreement itself. My teams
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside></p>

<a name="It.can.lead.to.better.engagement.in.sprint.activities."></a>
<h3>It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like "Pair by
default" and "Incremental improvement over consistency" were introduced during the brainstorm. They've since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<a name="The.team.working.agreement.provides.on-boarding.documentation."></a>
<h3>The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team's preferred methods of working. The working agreement isn't set in stone, and as the team
changes it's important to update it... but having it in writing helps new members acclimate quickly.</p>

<a name="What.are.some.challenges.with.team.working.agreements."></a>
<h2>What are some challenges with team working agreements?</h2>

<a name="Uncertainty.about.what.the.team.agreement.should.include."></a>
<h3>Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It's definitely important that you identify what you're looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside></p>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don't hesitate to update the agreement. Team retros are a great time to make updates.</p>

<a name="Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity."></a>
<h3>Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<a name="Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team."></a>
<h3>Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other's non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge...but if
you're already a distributed team, they are likely the same types of challenges you've worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other's non-verbal communication is
magnified when you're having conversations about identity. It's quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<a name="It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement."></a>
<h3>It takes effort to make sure one person isn't introducing their bias into the working agreement.</h3>

<p>It's important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it's very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we've had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team's ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<a name="Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do."></a>
<h3>Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn't have time to write the agreement, and the team's agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It's also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<a name="What.does.it.even.mean.to.have.a.team.working.agreement."></a>
<h3>What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren't sure how
to answer:</p>

<ul>
<li>How do you enforce the agreement?</li>
<li><em>Should</em> you enforce the agreement?</li>
<li>How do you get the entire team to embrace it?</li>
<li>What happens when the agreement is violated or disrespected?</li>
</ul>


<p>If you're using working agreements on your team and you've got answers for us, or you want to start using them and
have more questions, we'd love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn't? Well that's what today's blog post is about: what happens when things break and you
don't know why?</p>

<!-- more -->


<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I'm on the look-out for things that might break, and soon
after starting a recent on-call shift, "breaking" is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named "Radiation", had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it's based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn't receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation's point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn't have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation's performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night's sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<pre><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre>

<p>Then Griddler parses out the string "This is the most recent reply in this email conversation." for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy's largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler's regex.
Heroku's router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email's store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy's GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation's Gemfile to Artsy's fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote><p>It's rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p></blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to Be an Engineer]]></title>
    <link href="https://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/"/>
    <updated>2019-03-12T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer</id>
    <content type="html"><![CDATA[<p>First of all, that's very exciting! Software engineering is pretty darn coolâ€”you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as "the internet".</p>

<p>Last February, I also decided that I wanted to pursue computer engineering. I'd been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I'd consistently been working on small technical projects; first doing
<a href="https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4">some work</a> on a tool for SEO
optimization for our Editorial team, then building
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">emails with MJML</a>, and a few other bits and bobs. But I didn't think
of it as a serious pursuit.</p>

<p>Mostly, that was due to my experience programming in the pastâ€”I did about half a CS major in undergrad. At the
time, I felt that programming wasn't right for me, and I dropped the major during my third year.</p>

<p>It was Artsy's Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.</p>

<p>Here's what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!</p>

<!-- more -->


<a name="Step.One:.Tell.People.What.You.Want"></a>
<h1>Step One: Tell People What You Want</h1>

<p>This might've been the single biggest learning I took away from this experience: <em>if you tell people you want
something, you might just get it.</em></p>

<p>That may sound super obvious. It wasn't for me. I've usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
<a href="https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/">This post</a> by
<a href="https://twitter.com/NoaElad">Noa Elad</a> does a great job with this topic and is certainly worth a read.</p>

<p>The first person I told at Artsy was <a href="https://twitter.com/orta">Orta</a>. He'd often encouraged me to develop my
technical skills, and since he knows Artsy's engineering team and stack better than just about anyone, I figured
he'd be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.</p>

<p>The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.</p>

<p>The third person I told was Artsy's CTO, <a href="https://www.dblock.org/">dB</a>. This was Orta's recommendationâ€”dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.</p>

<p>I also didn't keep it a secret from the rest of my team or the company. I didn't show up wearing a shirt that said
"ENGINEER" on it, but I told people, "I'm working on becoming an engineer. I'm really hoping to stay at Artsy, but
if there's not a role open for me, that's fineâ€”I'll search elsewhere."</p>

<p>The net outcome of these conversations was that there wasn't a role open right then (and that I still had lot to
learn before I'd be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.</p>

<a name="Step.Two:.Figure.Out.What.You.Want.to.Learn"></a>
<h1>Step Two: Figure Out What You Want to Learn</h1>

<p>The answer to that question really depends on who you are, where you work, and where you <em>want</em> to work.</p>

<p>I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.</p>

<p>If you're interested in changing companies as well as careers, it's worth seeing if your target company or
companies have open source code you can check out. See if you can find them on <a href="https://www.github.com">GitHub</a> and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bitâ€”even fixing small bugs or typos is a good place to start, since you're both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy's code.</p>

<p>As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuffâ€”things that are recently updated or currently in
developmentâ€”is built on React using TypeScript. So my first question was "what do I need to know in order to write
TypeScript code in a React framework?"</p>

<p>Fortunately, a lot of other people have the same question.</p>

<a name="Step.Three:.Decide.How.You.Want.to.Learn.It"></a>
<h1>Step Three: Decide How You Want to Learn It</h1>

<p>First: <strong>there is no wrong way to go about learning to code</strong>. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, <strong>you are learning and
that is valuable</strong>. Learning to code is not a magical skill. Like just about everything, it's a matter of putting
in time. Just keep trying, even small things, and you <em>will</em> make progress.</p>

<p>Lots of people who want to become engineers go to coding bootcamps like <a href="https://flatironschool.com/">Flatiron</a> or
<a href="https://generalassemb.ly/">General Assembly</a>. That's a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn't do a coding
bootcampâ€”I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.</p>

<p>However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:</p>

<ol>
<li>Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.</li>
<li>Timeline. Because I didn't have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.</li>
<li>Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it's not the same as having multiple people learning the same
thing at the same time in the same physical space.</li>
</ol>


<p>The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don't have the
luxury to leave a job, pay $10K â€“ $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.</p>

<p>I'd say that If you can afford a bootcamp and have the time, it's a great way to jumpstart a coding career, but you
don't have to attend one to become a good engineer.</p>

<p>If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
<a href="https://www.udemy.com">Udemy</a>, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like <a href="https://www.udacity.com">Udacity</a>,
<a href="https://www.codecademy.com/">Codecademy</a>, and <a href="https://teamtreehouse.com/">Treehouse</a>.</p>

<p>I also highly recommend attending IRL meetups, because that's where you can make connections and learn from others
most easily. I'm a semi-regular attendee at the <a href="https://www.meetup.com/CocoaPods-NYC/">CocoaPods meetup</a> hosted by
<a href="https://twitter.com/ashfurrow">Ash</a> and Orta at Artsy HQ, and <a href="https://www.meetup.com/find/tech/">meetup.com</a> and
<a href="https://peerlab.community/">peerlab.community</a> are great places to find other events.</p>

<a name="Step.Four:.Get.Comfortable.Not.Knowing.Things"></a>
<h1>Step Four: Get Comfortable Not Knowing Things</h1>

<p>When learning engineering concepts (and practicalities), there's a lot you're not going to know.</p>

<p>This piece of advice is important both when learning and once you actually land an engineering job (it's been one
of the hardest parts of my first ~3 months on Artsy engineering).</p>

<p>Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don't know a language or
framework, it's very hard to solve problems using itâ€”your first problems are likely to be syntax errors and
misunderstandings.</p>

<p>One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">favorite rubber duck</a>. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fastâ€”but it takes humility and
self-awareness. <a href="https://twitter.com/b0rk">Julia Evans</a> has a <a href="https://jvns.ca/wizard-zine.pdf">great zine</a> that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
<a href="https://github.com/artsy/README/blob/master/resources/tech-learning.md">Artsy's README</a>.</p>

<a name="Step.Five:.Recognize.What.You.Bring.to.the.Table"></a>
<h1>Step Five: Recognize What You Bring to the Table</h1>

<p>Ok, so you're reconciled to the fact that you have a lot to learnâ€”but what about all the things you already know?
Those are important too!</p>

<p>Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone's experiences are different, I can't say for sure what impact your prior knowledge will
have.</p>

<p>For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing â†’ Engineering), I brought with me a broad understanding
of Artsy's goals and needs, which helps with day-to-day prioritization. And when I'm in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answerâ€”or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">past experience</a> will come in very handy.</p>

<p>There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I'll need for tasks. Don't underestimate the power of "soft skills"â€”even companies like Google
<a href="https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students">have come to recognize</a>
that it's often the non-technical skills that separate good engineers from great ones.</p>

<p>â€”â€”â€”â€”</p>

<p>Moving to engineering has been a tricky process, but one I'm very grateful to have experienced. I'm lucky to work
at an organization where moving from email marketing to engineering is possible, and I'm even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Hires Engineers]]></title>
    <link href="https://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring</id>
    <content type="html"><![CDATA[<p>Interviewing is hard. Interviewers want to make sure they're hiring the person who will add the most value to their
team; candidates want to make sure they're joining a company that aligns with their goals and perspectives.</p>

<p>Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don't use any of these. We often get asked why not - and how we assess technical skill without them.</p>

<!-- more -->


<p>We think our interview process at Artsy is unique, but we also think our interview process is great. We'd love to
see the tech community examine its hiring practices, and hopefully to adopt some of what's made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>What surprised you about the hiring process at Artsy while you were a candidate?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>What most surprised me at the time was <em>who</em> was interviewing me. I had a teleconference screening with Artsy's now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.</p>
    <p>I was surprised, but encouraged, to be speaking with someone who wasn't an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with "traditional" tech hiring practices is that candidates are somehow trying to trick their way into positions they arenâ€™t qualified for. It's no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.</p>
    <p>I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>With 20 years (!!!) of experience as a software engineer, I've seen my share of interviews - from both sides. On the hiring side, I've said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It's much less about knowing trivia or syntax, and much more about having the personality to solve problems.</p>
    <p>I'd never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I've done as a candidate - until Artsy.</p>
  </div>
</aside></p>

<p>Artsy's process of hiring new engineers was created and is maintained <em>by</em> our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">our company values</a>. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team's growth; we hired
a dozen engineers in 2018. We don't use recruiters (though we did to hire our recent VP of Engineering).</p>

<p>Our former Director of Web Engineering has a blog post where he
<a href="https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers">describes Artsy's hiring process</a>.
Though some specifics have since changed, the foundations remain the same.</p>

<blockquote><p>If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsyâ€™s mission.</p></blockquote>

<p>Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have <a href="https://github.com/artsy/README/blob/master/playbooks/informationals.md">public documentation</a> so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
<a href="https://www.livecareer.com/career/advice/interview/behavioral-interviewing">behavioral interviews</a>, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and <a href="https://managingbias.fb.com">unconscious bias</a>
training.</p>

<p>Each interviewer is given key areas to focus on, based on the candidate's background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren't
limited to:</p>

<ul>
<li>Comprehension of Artsy</li>
<li>Artsy company values alignment</li>
<li>Ability to communicate complex ideas</li>
<li>Learning and adaptation</li>
<li>Self-learning and drive</li>
<li>Independence and teamwork</li>
<li>Systems development</li>
<li>Product knowledge</li>
</ul>


<p>After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can't see each
other's feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either "strong yes", "yes", "no", or "strong no"; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.</p>

<p>Quoting again from our former Director of Web's blog post:</p>

<blockquote><p>Artsy believes that 'references are not a defense against hiring poorly, they are a way to hire great people'.</p></blockquote>

<p>Artsy's reference checks are in-depth and deserve their own blog post; they are <em>key</em> to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.</p>

<p>If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don't negotiate on compensation.</p>

<a name="What.s.wrong.with.typical.hiring.practices."></a>
<h2>What's wrong with typical hiring practices?</h2>

<p>There are many tactics for assessing a candidate's technical abilities, but we've found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.</p>

<a name="In-person.coding.challenges"></a>
<h3>In-person coding challenges</h3>

<p>The intention of in-person coding challenges is to verify that the engineer can "actually write code." This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it <strong>is</strong> a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don't feel like this is how we want to measure engineers; it just
doesn't reflect reality.</p>

<a name="Whiteboard.interviews"></a>
<h3>Whiteboard interviews</h3>

<p>One intention of whiteboard interviews is to reduce the stress on the candidate, because they don't have to worry
about code syntax while under a microscope. These types of interviews still lead to
<a href="https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html">stressful conditions</a>,
though, and they don't provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.</p>

<p>It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn't necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn't even necessarily speak to their ability to
<em>use</em> search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.</p>

<a name="Sample.code"></a>
<h3>Sample code</h3>

<p>Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don't have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.</p>

<p>It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that womenâ€™s contributions to open source projects were accepted more frequently than menâ€™s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men's contributions were
<a href="https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28">accepted more frequently than women's</a>.</p>

<a name="Take-home.challenges"></a>
<h3>Take-home challenges</h3>

<p>The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren't overwhelmed with the pressure of an audience. Weâ€™ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate's technical skills to our satisfaction
(more on that later).</p>

<p>This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn't consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they're likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.</p>

<p>Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?</h3>
  </div>
    <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like "Fizz Buzz" or trivia questions allows us to easily narrow down the candidate pool. It's a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it's "Oh, you don't know what a closure is? Sorry, we're not interested." It's much harder to write a hiring algorithm that respects nuance: "well...it depends. Maybe you have different experiences than I do. It'll take some digging to find out if our experiences will complement each other."</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. Thereâ€™s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were <a href="https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history">systematically pushed out of the industry</a>. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.</p>
  </div>
</aside></p>

<a name="What.we.do.instead"></a>
<h2>What we do instead</h2>

<p>In addition to the above strategies not being fair, we've found that they measure things that are secondary to what
we're looking for.</p>

<p>Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone canâ€™t build the software Artsy needs to succeed â€“ they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills arenâ€™t important, but
the ability to communicate and learn is more important.</p>

<p>Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they're hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we've built.</p>

<p>When you interview with Artsy as an engineer, you won't just meet other engineers and a manager. You'll meet with
people from other departments too. If you're hired as an Artsy engineer, you're going to work with folks from all
across the company - we want to make sure you can communicate with them because that's something we do every day.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>How has this impacted your day-to-day work at Artsy so far?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">level of trust in my new coworkers</a> that usually takes weeks or months to develop. </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>In most of my previous jobs, it's taken me a while to learn who I can be vulnerable around and who I can't. At Artsy I have quickly learned that I don't need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I'm a sensitive person. I don't like pointless or inflammatory conflict â€“ I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I'm able to fold the emotional wellbeing that <strong>I</strong> get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.</p>
  </div>
</aside></p>

<a name="But.we.still.evaluate.technical.aptitude"></a>
<h2>But we still evaluate technical aptitude</h2>

<p>Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
"aptitude," not "skills": we don't expect our engineers to already know everything about the tech stack we're
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
<a href="https://github.com/artsy/README/blob/master/careers/juniors.md">what we look for in junior engineers</a>.)</p>

<p>So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? <strong>By talking to people</strong>.</p>

<p>We learn a lot about candidates in their interviews. We'll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code theyâ€™ve worked with, and ask them how they think it got that
way. Weâ€™re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.</p>

<a name="References.are.important.to.us"></a>
<h2>References are important to us</h2>

<p>We also learn a lot through reference checks. Our reference checks aren't simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It's quite an in-depth conversation, with questions structured to dig into
specifics about the candidate's behavior.</p>

<p>An Artsy reference call might include the following structured questions:</p>

<blockquote><p>In your capacity as [relationship to the candidate], how many people have you worked with in the candidate's
role?</p>

<p>Okay, in <em>just</em> terms of job performance, how you rank the candidate out of that [X] many people?</p>

<p>Okay, finally, what's the difference between [the candidate's rank] and number one? How would the candidate need
to grow to get to number one?</p></blockquote>

<p>The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we're <em>actually</em> interested in. These aren't
easy or comfortable questions, but they give us an insight into the candidate's career, history, and areas to grow.</p>

<p>Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy's hiring staff.</p>

<a name="But.seriously..we.really.care.about.the.personal.side"></a>
<h3>But seriously, we really care about the personal side</h3>

<p>We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don't give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.</p>

<a name="Our.hiring.practice.philosophy"></a>
<h2>Our hiring practice philosophy</h2>

<p>One of our core values at Artsy is that
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People Are Paramount</a>.
We like to think that our interview process was built to reflect this.</p>

<p>We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they're a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It's not perfect, but it has served us well.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>Where do you still think Artsy has to grow, in terms of how it hires engineers?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think one area we've historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering's hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren't already represented on our team.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>I agree with Ash. I think all companies hire based on their employees' networks, because that's the easiest way to find people. <a href="https://twitter.com/seldo/">Laurie Voss</a> talked about this recently on <a href="https://reactpodcast.simplecast.fm/33">the React Podcast</a>. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I'd love to see Artsy hire beyond our networks (and as a result expand our networks).</p>
  </div>
</aside></p>

<p>Our hiring process will never be "finished" because we're always improving on it. Some recent improvements are
inward-facing to help <em>us</em> get better, like:</p>

<ul>
<li>Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.</li>
<li>Integrating hiring updates into our weekly standup.</li>
<li>Creating a Slack bot for engineers to monitor our hiring pipeline.</li>
<li>Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.</li>
<li>Many, many docs written on guiding the process.</li>
</ul>


<p>Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we've created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
<a href="https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a">revamped its hiring process</a>
with this approach.</p>

<p>We hope this catches on.</p>

<p>So what can <em>you</em> do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you'd be surprised how motivating this can be, and it's a great opportunity to get
feedback from other companies. Leave a comment below, let's brainstorm on other ways to improve the state of hiring
in software engineering!</p>

<p>And remember: while <em>you</em> might be motivated based on what feels "right", businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.</p>
]]></content>
  </entry>
  
</feed>
