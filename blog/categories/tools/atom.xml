<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2021-02-08T23:51:48+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. ðŸ˜± For many
teams this led to batching code reviews or even skipping them altogether. ðŸ˜±ðŸ˜±</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it's convenient for the reviewer:
asynchronously. Asynchronous communication isn't all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->


<p>When you're in a synchronous conversation with someone, it doesn't take much time for them to let you know you've
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it's
convenient for me, you ask a clarifying question when it's convenient for you, I respond when it's convenient for
me, etc. Suddenly my PR has been open for three days and we haven't yet made it to a common understanding of why
I've made these changes.</p>

<p>It's extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I'm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<a name="Explain.Your.Reasoning"></a>
<h2>Explain Your Reasoning</h2>

<p>You've been thinking a lot about the problem you're solving - probably significantly more than your reviewers.
You'll save everyone time by describing the problem and sharing how you're thinking about it.</p>

<a name="Define.the.problem.and.solution"></a>
<h3>Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you've missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<a name="Explain.interesting.lines.of.code"></a>
<h3>Explain interesting lines of code</h3>

<p>The reviewers aren't the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren't obvious.</p>

<a name="Give.a.guided.tour.of.the.changes"></a>
<h3>Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It's like he's sitting next to you!</p>

<a name="Show.Your.Work"></a>
<h2>Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you've worked through this problem thoroughly, and you've
brought receipts.</p>

<a name="Make.small..self-contained.commits"></a>
<h3>Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here's a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<a name="Demonstrate.the.results"></a>
<h3>Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too ðŸ˜¬). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you've verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here's a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she's made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<a name="Document.the.unseen"></a>
<h3>Document the unseen</h3>

<p>Sometimes a PR's changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here's a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what's happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<a name="Share.your.progress"></a>
<h3>Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they're "done". If
there are changes you'd like to get people's eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code>WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn't complete. As you continue your work, use a <code>TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it's merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<a name="Spread.knowledge"></a>
<h2>Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren't just about collecting feedback from the reviewer. They're also
an opportunity to spread knowledge from the author.</p>

<a name="Share.your.learnings"></a>
<h3>Share your learnings</h3>

<p>Maybe you learned some things about the system you're working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<a name="Share.development.tips"></a>
<h3>Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you'd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">"Engineer workflow" playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you've got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying canaries with auto]]></title>
    <link href="https://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto/"/>
    <updated>2020-02-20T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto</id>
    <content type="html"><![CDATA[<p>Coordinating changes across many packages in the node ecosystem can be quite the challenge. You can use <code>npm link</code>
or <code>yarn link</code> to create a symlink of the package you're developing on into another package, but it
<a href="https://github.com/yarnpkg/yarn/issues/1761#issuecomment-259706202">has some drawbacks</a>. If you're doing local
development and need to rapidly see updates and <code>yarn link</code> isn't working out there's always tools like
<a href="https://github.com/whitecolor/yalc#yalc">yalc</a> to help you out. That's really only for local development though.</p>

<p>What if you need to test packages together in a staging environment? Generally the approach would to be to deploy a
<a href="https://martinfowler.com/bliki/CanaryRelease.html">canary</a> version to npm that you can use in your staging
environment. I'll go over how to do that and how Artsy automates it.</p>

<!-- more -->


<p>Publishing a canary isn't necessarily very hard. It's just a regular publish to npm with a few more steps.</p>

<p>For example, if we were wanting to publish a canary version of <code>@artsy/reaction</code></p>

<ol>
<li>Update <code>package.json</code>, set version to a canary version, e.g. <code>2.0.0-canary-&lt;PR#&gt;</code>, <code>3.1.5-canary-&lt;PR#&gt;</code>, ...</li>
<li>Run <code>npm publish --tag canary</code> in <code>reaction</code> to publish the package under the canary tag</li>
<li>Run <code>yarn add @artsy/reaction@canary</code> to install canary package in the consuming system</li>
</ol>


<p><em>Tip: Running <code>npm dist-tag ls</code> can be helpful to see what tagged packages are available</em></p>

<p>For a lot of people, that'd be enough. End blog post. Here at Artsy, we like things to be a little more
frictionless.</p>

<p>We're already big fans of <a href="https://github.com/intuit/auto">Auto</a>, Intuit's tool for automatically deploying
releases on PR merges. Orta wrote an awesome blog post on how we
<a href="https://artsy.github.io/blog/2019/01/03/label-based-prs/">migrated to auto</a> from semantic-release a while back.</p>

<p>As a short recap, <code>Auto</code> makes the deployable units of a package be a PR instead of a commit. It uses labels like
<code>Version: Major</code>, <code>Version: Minor</code>, etc to determine how the PR will affect the package version. When a PR is
merged it'll automatically cut a released based on that label.</p>

<p>As a testament to how awesome <code>Auto</code> is, it already supports
<a href="https://intuit.github.io/auto/pages/generated/canary.html">canary deployments</a> out of the box!</p>

<p>Essentially when we're on a branch that isn't master our CI runs this command:</p>

<pre><code>auto canary
</code></pre>

<p>and auto takes care of publishing a canary version to NPM <em>and</em> updating the PR description with the version and
instructions on how to use it.</p>

<p>You can <a href="https://github.com/artsy/reaction/pull/3168">check out the PR</a> where I enabled it on reaction to see it in
action. The CI configuration itself is layered behind some
<a href="https://circleci.com/docs/2.0/orb-intro/">CircleCI Orb</a>s. You can find all that configuration in
<a href="https://github.com/artsy/orbs">artsy/orbs</a> if you're curious.</p>

<p>Ultimately the culmination of this work means that every PR to a library at Artsy gets a canary. It's incredibly
simple to test changes in another system now.</p>

<p>There is, however, one caveat. Being as canaries are being deployed to NPM, they need our NPM token. We can't just
share that with everyone, so this functionality doesn't work on forks. Given how CircleCI works, this includes
forks from folks who even have write access to the repository. We're thinking about how to solve that problem but
that'll be another blog post for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
<li>From developers' working branches</li>
<li>To the master branch</li>
<li>Through a hopefully-successful build</li>
<li>To a staging environment</li>
<li>To production</li>
</ul>


<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We've been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->


<pre><code>gem install releasecop
releasecop edit
</code></pre>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<pre><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre>

<p>The <code>charge</code> app is a typical deployment to Heroku. Work progresses from the <code>master</code> branch to a <code>charge-staging</code> app to a <code>charge-production</code> app. The <code>gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code>master</code>), tested (<code>master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code>releasecop check [app]</code> command to report the status of your apps' releases:</p>

<pre><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy DurÃ¡n)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Uses GitHub to Build Artsy]]></title>
    <link href="https://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/"/>
    <updated>2012-01-29T14:26:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy</id>
    <content type="html"><![CDATA[<p><a href="http://zachholman.com/">Zach Holman</a> gave a good talk on <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How GitHub uses GitHub to build GitHub</a> at Rubyconf. It was great to hear how similar our own processes are at Artsy, with a few notable differences.</p>

<p>Artsy engineers store almost everything on GitHub. We use GitHub Wikis, but don't use GitHub Issues much. We work in 3-week sprints with <a href="http://pivotaltracker.com/">Pivotal Tracker</a> instead. This blog is on GitHub. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</p>

<p>The most interesting part for me was around these two slides.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull.png" alt="Pull" /></p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-fork.png" alt="Fork" /></p>

<p>Zach emphasized that you don't need forks to make pull requests. While technically true, I find forks particularly useful to keep things clean.</p>

<p>At Artsy we use personal forks to work on features, create topical branches and make pull requests into the master from there. This is the workflow of the vast majority of open-source projects too. Now, Zach is right, you don't want to create any second class developers - our entire team has write access to the master. We use pull requests from forks to do peer code reviews, even for trivial things. I would typically make a pull request including the person I'd like to code review my changes in the title. Here's an example.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull-request.png" alt="Targeted Pull Request" /></p>

<p>(Notice the use of hash rocket. Zach, Ruby has transcended our lives too.)</p>

<p>Working on forks keeps developer branches away from "master". The main repository only has three branches: "master", "staging" and "production" and each developer can make up whatever branching strategy they like in individual forks.</p>

<p>Code reviews have nothing to do with hierarchy or organization, any developer will code review any other developer's work. We tend to avoid using the same person for two subsequent code reviews to prevent excessive buddying. Zach called his pull requests "collective experiments" - a place for active discussions, rejections and praise. I really like that. Each of my rejected pull requests has been a great learning experience.</p>
]]></content>
  </entry>
  
</feed>
