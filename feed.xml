<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>https://artsy.github.io/</link>
    <atom:link href="https://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Mar 2021 19:46:31 +0000</pubDate>
    <lastBuildDate>Tue, 09 Mar 2021 19:46:31 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Strategies For Small, Focused Pull Requests</title>
        <description>&lt;p&gt;A common suggestion for improving pull requests (PRs) is to &quot;make your PR small and focused&quot;. I myself gave this suggestion in &lt;a href=&quot;https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/&quot;&gt;a recent article on this very blog about including context in PRs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like most internet advice, this can feel like the &lt;a href=&quot;https://knowyourmeme.com/memes/how-to-draw-an-owl&quot;&gt;&quot;draw the rest of the owl&quot;&lt;/a&gt; meme. Even if we&#39;re in agreement that I &lt;em&gt;should&lt;/em&gt; make a PR smaller...&lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; do I do it? How do I avoid a big PR when there&#39;s a lot of cross-cutting changes to make? How do I create small, focused units of work when I&#39;m building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren&#39;t all polished?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is..small.and.focused..&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is &quot;small and focused&quot;?&lt;/h2&gt;

&lt;p&gt;Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.&lt;/p&gt;

&lt;p&gt;Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it&#39;s still going to be difficult for you to review the large amount of changes thoroughly.&lt;/p&gt;

&lt;p&gt;To make our PR reviewers&#39; jobs easier, we&#39;re looking for the intersection of small &lt;em&gt;and&lt;/em&gt; focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.&lt;/p&gt;

&lt;p&gt;Note that the recommendation for &quot;small and focused&quot; PRs does &lt;strong&gt;not&lt;/strong&gt; include the word &quot;complete&quot;. I&#39;m a perfectionist and I like my work to be very polished before it&#39;s done, but when we&#39;re iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I&#39;ve had as an Artsy engineer — finding the balance between polish and iteration. Artsy&#39;s core values include &lt;a href=&quot;https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection&quot;&gt;Impact Over Perfection&lt;/a&gt; but my personal values include &quot;make things &lt;em&gt;real good&lt;/em&gt;&quot; and it can be hard for me to navigate that tension.&lt;/p&gt;

&lt;a name=&quot;Integrating.code.a.little.at.a.time&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Integrating code a little at a time&lt;/h3&gt;

&lt;p&gt;A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I&#39;ve worked on teams and projects where we used very long-lived branches for features or even epic — I know those environments exist. This article is probably not the one that will convince you to move to &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;trunk-based development&lt;/a&gt;; it also might be less useful without trunk-based development.&lt;/p&gt;

&lt;p&gt;Having said that, even with long-lived feature branches you can introduce code &lt;em&gt;into those branches&lt;/em&gt; a little bit at a time. PRs can be opened against &lt;em&gt;any&lt;/em&gt; branch, not just &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A couple strategies we use at Artsy for integrating code a little bit at a time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://trunkbaseddevelopment.com/feature-flags/&quot;&gt;Feature toggles&lt;/a&gt;&lt;/strong&gt;. &lt;a href=&quot;https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/&quot;&gt;Ash wrote about Echo&lt;/a&gt;, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system &lt;em&gt;or&lt;/em&gt; user level. When we introduce new code we can hide it behind a feature flag until we&#39;re ready for everyone to see it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&quot;Hidden&quot; routes&lt;/strong&gt;. Often when we redesign or modernize an existing route on Artsy.net we&#39;ll create a &lt;em&gt;second&lt;/em&gt; similar route. We hide the in-progress page behind that new route and don&#39;t share it until it&#39;s ready. 🤫&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I&#39;m not suggesting you use these strategies universally, but if you think you&#39;re headed toward a very large PR, these are some things to try.&lt;/p&gt;

&lt;a name=&quot;Start.with.small.scope.....slice.your.stories.small&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Start with small scope — slice your stories small&lt;/h2&gt;

&lt;p&gt;One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.&lt;/p&gt;

&lt;p&gt;There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time&lt;/li&gt;
&lt;li&gt;Separate by user role&lt;/li&gt;
&lt;li&gt;Separate individual edge cases&lt;/li&gt;
&lt;li&gt;Separate a simplified experience from an enhanced version&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.&lt;/p&gt;

&lt;a name=&quot;PR.by.architectural.layer&quot;&gt;&lt;/a&gt;
&lt;h2&gt;PR by architectural layer&lt;/h2&gt;

&lt;p&gt;Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code — submit a PR to introduce changes to the API, and once it&#39;s merged follow up with another PR to introduce changes to the UI.&lt;/p&gt;

&lt;p&gt;Depending on the architecture of your system, you might already be forced to this. At Artsy, our &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;web app lives in one repo&lt;/a&gt;, our &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;GraphQL endpoint lives in another&lt;/a&gt;, and many services are separated into repositories behind that. We &lt;em&gt;must&lt;/em&gt; integrate our features one layer at a time. Here&#39;s an example where &lt;a href=&quot;https://artsy.github.io/author/matt/&quot;&gt;Matt&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/2819/files&quot;&gt;added a field to our API&lt;/a&gt; in one PR, and &lt;a href=&quot;https://github.com/artsy/force/pull/6613&quot;&gt;propagated it to the UI&lt;/a&gt; in a separate PR. Even if you don&#39;t have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.&lt;/p&gt;

&lt;p&gt;The suggestion to PR by architectural layer is not in conflict with slicing stories small — in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.&lt;/p&gt;

&lt;a name=&quot;Build.a.walking.skeleton&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Build a walking skeleton&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;walking-skeleton&quot;&gt;walking skeleton&lt;/a&gt; is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.&lt;/p&gt;

&lt;p&gt;Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won&#39;t do very much — maybe it only displays one field — but that&#39;s okay because no one&#39;s going to see it yet. The important thing is that the moving pieces are all connected — the database, the API, the UI.&lt;/p&gt;

&lt;p&gt;Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.&lt;/p&gt;

&lt;p&gt;This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we&#39;re likely to face some intense merge conflict headaches when we realize we&#39;ve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we&#39;re mostly bolting fields on to existing infrastructure along the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1&quot;&gt;This PR&lt;/a&gt; is an example of a walking skeleton. My goal was to stand up an app that connected &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt;, and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. &lt;a href=&quot;https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25&quot;&gt;The actual app doesn&#39;t display very much&lt;/a&gt; — just enough to prove that the pieces were all working.&lt;/p&gt;

&lt;a name=&quot;Separate.risky.controversial.work.from.routine.work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separate risky/controversial work from routine work&lt;/h2&gt;

&lt;p&gt;It&#39;s not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it&#39;s obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.&lt;/p&gt;

&lt;p&gt;Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they&#39;re combined, but you also might consider separating the less-interesting implementation into its own PR.&lt;/p&gt;

&lt;p&gt;The worst review you can get on a PR that contains both novel and routine work is &quot;LGTM!&quot; (looks good to me). It likely means the reviewer couldn&#39;t separate the signal from the noise and overlooked the bits that required more thought and effort.&lt;/p&gt;

&lt;a name=&quot;Separate.infrastructural.work.from.implementations&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separate infrastructural work from implementations&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;t-shaped person&lt;/a&gt; is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.&lt;/p&gt;

&lt;p&gt;Code can have a similar shape. Infrastructural work tends to be wide and shallow — it touches a lot of places in your code, but it doesn&#39;t go deep in any of them. Implementation work tends to be the opposite — it doesn&#39;t affect the entire app, but it goes very deep for one feature.&lt;/p&gt;

&lt;p&gt;We probably review infrastructural changes differently than we review implementation changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they&#39;re useful and usable patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An individual implementation gets more scrutiny on user-facing details. It&#39;s probably combining &lt;em&gt;existing&lt;/em&gt; patterns, so we&#39;ll spend less time looking at abstractions. We&#39;ll spend more time confirming it works for our users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.&lt;/p&gt;

&lt;p&gt;Some examples of infrastructural changes that could be separated from implementation work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We introduced a seam to the code in order to make room for our implementation.&lt;/li&gt;
&lt;li&gt;We updated a dependency to take advantage of a new feature.&lt;/li&gt;
&lt;li&gt;We refactored before we started our implementation.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Separating.an.already-large.PR&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Separating an already-large PR&lt;/h2&gt;

&lt;p&gt;It&#39;s natural for PRs to grow large. &lt;a href=&quot;https://thedecisionlab.com/biases/optimism-bias/&quot;&gt;Optimism bias&lt;/a&gt; diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won&#39;t take much work until you get deeper and find complexity in places you hadn&#39;t considered. There&#39;s a lot of uncertainty when you start working on a feature and we&#39;d need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly...it isn&#39;t anymore.&lt;/p&gt;

&lt;p&gt;This is what usually prevents developers from separating PRs — by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.&lt;/p&gt;

&lt;p&gt;When you&#39;ve got a PR/branch that contains multiple lines of work and you want to separate them, &lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase&quot;&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/a&gt; is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use &lt;code&gt;git rebase&lt;/code&gt; to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.&lt;/p&gt;

&lt;p&gt;Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not &lt;em&gt;always&lt;/em&gt; separate/rebase PR branches, you&#39;ll appreciate small commits with clear messages when you do.&lt;/p&gt;

&lt;a name=&quot;Small.PRs.start.long.before.the.work.starts&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Small PRs start long before the work starts&lt;/h2&gt;

&lt;p&gt;The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/</guid>
        
        
        <category>community</category>
        
        <category>engineering</category>
        
        <category>github</category>
        
        <category>team</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Why Asking for Help Strengthens Engineering Teams</title>
        <description>&lt;p&gt;I know that for many developers, especially those early in their careers, asking for help can be intimidating. I
often fear wasting someone’s time or exposing myself as less skilled or smart than my team initially thought.&lt;/p&gt;

&lt;p&gt;In my first month as a software engineer at Artsy (and barely six months into life as an engineer after
&lt;a href=&quot;https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc&quot;&gt;transitioning from a career in communications&lt;/a&gt;), I was struggling
through a ticket assigned to me as a “good first issue.” (The team estimated the task to be straightforward enough
for someone new to the team.) After a few hours stumbling between the ticket, my code, and Google, I made very
little progress.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Early and often, my fellow engineers at Artsy encourage me to ask for help when I hit roadblocks. Even with the
support explicitly offered to me, I was shaky. The extra 10 seconds it took to type out my question in Slack was
just enough time for me to chicken out.&lt;/p&gt;

&lt;p&gt;Opening up with my team members about my concerns, I learned that asking for help is not just for me but ultimately
benefits my team. Sharing their insights below, I hope other engineers, early-career or not, feel empowered to ask
questions, stay curious, and prioritize learning for themselves and their team — all hallmarks of great engineers.&lt;/p&gt;

&lt;a name=&quot;Why.It...s.So.Hard.to.Ask.For.Help&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why It’s So Hard to Ask For Help&lt;/h2&gt;

&lt;p&gt;Working in tech and as an engineer (and even in &lt;a href=&quot;https://medium.com/better-programming/why-women-dont-pursue-software-engineering-17d0dead24e9&quot;&gt;undergraduate computer science
classes&lt;/a&gt;,) I often felt surrounded by people smarter than me.
Operating alongside peers who are excelling motivates me to set the bar higher for myself. But at times, it can
also be intimidating. There is a reason that imposter syndrome is so pervasive in tech industry discourse. (A 2018
study found that &lt;a href=&quot;https://www.cnet.com/news/tech-employees-likely-to-suffer-from-impostor-syndrome/&quot;&gt;58% of tech workers suffer from
it&lt;/a&gt;.) The fear of being “found out” as an imposter,
inadequate, or less impressive can be especially acute for those early in their career and from &lt;a href=&quot;https://zora.medium.com/why-imposter-syndrome-is-worse-for-women-of-color-3bcf37335405&quot;&gt;underrepresented
groups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like other VC-backed companies, Artsy is working toward aggressive business targets and ships software at a high
velocity. At high-growth companies, tight deadlines and high-energy cultures make it tempting to shy away from hard
problems and to let the more senior people tackle the tough challenges. But these moments are critical for growth
and learning across the team.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/pipilotti-rist-help-me&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/P24AUuVFX50Tr2Q6w58-fQ/large.jpg&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Pipilotti Rist, Help me, 2016, Hauser &amp; Wirth, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Rethinking.Productivity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rethinking Productivity&lt;/h2&gt;

&lt;p&gt;On Artsy’s engineering team, we put a lot of energy into optimizing developer workflows and communication channels.
While asking for help seemed counter to productivity, my team helped me see that the opposite is true: Encouraging
engineers to support one another is integral to building an effective engineering organization.&lt;/p&gt;

&lt;p&gt;Pair programming is growing in popularity, not because society is becoming more kind and patient, but because it’s
good for business. Teams in synergy can &lt;a href=&quot;https://martinfowler.com/articles/on-pair-programming.html&quot;&gt;ship higher-quality code more quickly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because teaching is one of the best ways to become an expert, a more experienced engineer can level up when pairing
with a less experienced engineer. Teaching solidifies understanding, reveals gaps in knowledge, and opens up new
questions for exploration. Recently, a senior engineer shared that they never questioned something in our codebase
until I prompted them to take a closer look. We deepened our understanding together.&lt;/p&gt;

&lt;p&gt;Providing help also cultivates an engineer’s mentoring skills, which is especially important if they aim for
management or leadership roles.&lt;/p&gt;

&lt;p&gt;Finally, a lot of people enjoy helping others for the pure reason that it feels good. Studies show that a majority
of workers prioritize meaning in their work over salary and that meaningful work translates to greater retention
and productivity. (&lt;a href=&quot;https://hbr.org/2018/11/9-out-of-10-people-are-willing-to-earn-less-money-to-do-more-meaningful-work&quot;&gt;Harvard Business Review&lt;/a&gt; goes
so far as attaching a dollar sign to meaningful work: they estimate highly meaningful work generates an extra
$9,078 per worker per year and saves an average of $6.43 million in annual turnover-related costs for every 10,000
workers.) All good arguments for engaging in collaborative and empathetic workflows.&lt;/p&gt;

&lt;a name=&quot;Building.Community.and.Scaling.Knowledge&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Building Community and Scaling Knowledge&lt;/h2&gt;

&lt;p&gt;Building a culture of collaboration is particularly challenging, especially for distributed teams and those working
remotely during the pandemic. Pair programming provides opportunities for connecting, which can reverberate
throughout an organization.&lt;/p&gt;

&lt;p&gt;Learning also has a network effect, so knowledge scales exponentially. If someone teaches me a new concept, I am
now empowered to share the knowledge with others, and then they can then spread that knowledge even further.&lt;/p&gt;

&lt;p&gt;Put simply by one of my coworkers: Learning is contributing.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://www.artsy.net/artwork/richard-artschwager-question-mark&quot;&gt;
        &lt;img src=&quot;https://d32dm0rphc51dk.cloudfront.net/fccQIzHtxIwf2eHTrEg0Dw/large.jpg&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Richard Artschwager, Question Mark, 2001, Gagosian, available on Artsy
    &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Why.Prioritizing.Your.Growth.is.Okay&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why Prioritizing Your Growth is Okay&lt;/h2&gt;

&lt;p&gt;My natural tendency is to want to give more than I ask. But for all early-career engineers, it is also normal to
need a lot of help at the beginning. I need to trust that our recruitment team knew to ask the right questions to
make an informed decision to hire me — the real me, beginner and all. The fastest way to improve is to tackle
difficult problems head-on and ask questions when I need support. Investing in my learning at this point in my
career will pay dividends to my team in the months and years to come.&lt;/p&gt;

&lt;p&gt;So yes, I went ahead and pressed send on that Slack to ask for help.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This post originally appeared on Anna&#39;s blog on &lt;a href=&quot;https://anna-carey.medium.com/&quot;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/02/11/asking-for-help/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/02/11/asking-for-help/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>learning</category>
        
        <category>teaching</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>Introducing Artsy Engineering Radio</title>
        <description>&lt;p&gt;Available now on &lt;a href=&quot;https://podcasts.apple.com/us/podcast/artsy-engineering-radio/id1545870104&quot;&gt;Apple Podcasts&lt;/a&gt;, &lt;a href=&quot;https://open.spotify.com/show/0gJYxpqN6P11dbjNw8VT2a?si=L4TWDrQETwuVO6JR1SOZTQ&quot;&gt;Spotify&lt;/a&gt;, and coming soon elsewhere, is Artsy
Engineering Radio!&lt;/p&gt;

&lt;p&gt;Solving problems in the world of software engineering can mean a lot of different things, and this podcast will
explore what that looks like at Artsy. If you&#39;ve followed our blog, you can expect a podcast that sounds like it.
There are a ton of amazing engineers here at Artsy and we&#39;re excited for you to hear their voices and stories. Our
hope is that this podcast will make it easy for more engineers at Artsy to contribute to the public persona of
Artsy Engineering.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;We&#39;ll release new episodes every other week. Our target episode length is 30 minutes. Some episodes will be
technical and others less so. Because
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;we work in the open&lt;/a&gt;
it&#39;s easy for us to talk about our work in public.&lt;/p&gt;

&lt;p&gt;This isn&#39;t the first attempt at an Artsy engineering podcast! Our engineering team has attempted multiple times to
start one. When &lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt; went to create new Slack and Notion hubs, he found that both already existed. The
&lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/368&quot;&gt;PR for the podcast RSS feed&lt;/a&gt; was opened in July, 2017!&lt;/p&gt;

&lt;p&gt;We&#39;re beating the fizzle this time, though. We&#39;ve got momentum and enthusiasm on our side — several episodes are
already published and we&#39;ve got more lined up. Instead of tinkering with tooling we&#39;re focusing on making episodes,
even if they aren&#39;t perfect. Like the software we build, the podcast will get better over time as we iterate.&lt;/p&gt;

&lt;p&gt;What do we have so far? In
&lt;a href=&quot;https://podcasts.apple.com/us/podcast/0-introducing-artsy-engineering-radio/id1545870104?i=1000503035175&quot;&gt;episode 0&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/author/jonallured/&quot;&gt;Jon&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/author/matt-dole/&quot;&gt;Matt&lt;/a&gt;, and &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; introduced the podcast and talked about what you can expect from
future episodes. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/1-how-to-have-good-meetings/id1545870104?i=1000503035176&quot;&gt;Episode 1&lt;/a&gt; features a conversation with &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about facilitating meaningful and
inclusive team meetings, and how meetings are part of building teams, trust, and systems. &lt;a href=&quot;https://podcasts.apple.com/us/podcast/2-how-artsy-hires-engineers/id1545870104?i=1000504558896&quot;&gt;Episode 2&lt;/a&gt; is
a conversation between &lt;a href=&quot;https://artsy.github.io/author/steve-hicks/&quot;&gt;Steve&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/author/ash/&quot;&gt;Ash&lt;/a&gt; about how Artsy hires engineers.&lt;/p&gt;

&lt;p&gt;Find the first few episodes right now in your podcast player. Watch for future episodes in your feed and we&#39;ll
announce them &lt;a href=&quot;https://twitter.com/artsyopensource&quot;&gt;on Twitter&lt;/a&gt; when they&#39;re released.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/</guid>
        
        
        <category>community</category>
        
        <category>learning</category>
        
        <category>podcast</category>
        
      </item>
    
      <item>
        <title>Echoes From the Past: Supporting Old App Versions</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/&quot;&gt;In, a recent blog post&lt;/a&gt;, I discussed a fundamental difference between web and iOS deployments. Web software is deployed to servers that are under your control, while iOS software is deployed to users&#39; devices that you have &lt;em&gt;no&lt;/em&gt; control over. This distinction really changes how you think about the code that you ship, because that code could be running indefinitely on devices that never get updated.&lt;/p&gt;

&lt;p&gt;The previous post focused on this distinction through the lens of accidentally shipping (and then fixing) a bug. This focus on bugs is important, but focusing &lt;em&gt;only&lt;/em&gt; on bugs left me unable to articulate an important, nuanced distinction between hosting code and shipping app binaries. So let&#39;s dive in.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Software, ideally, is made up of more than just bugs; it has working code, too! Just like with (accidentally) shipping bugs, you need to be aware that the working code you ship is &lt;em&gt;also&lt;/em&gt; going to be running indefinitely. That puts pressure on developers to make sure that the code in their apps will continue to function correctly, even as (for example) the web APIs that the apps rely on get updated over time.&lt;/p&gt;

&lt;a name=&quot;A.Case.Study&quot;&gt;&lt;/a&gt;
&lt;h2&gt;A Case Study&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s iOS app relies on a services we call &quot;&lt;a href=&quot;https://github.com/artsy/echo&quot;&gt;Echo&lt;/a&gt;&quot; to serve remote configuration. This lets Artsy do things like selectively disable features (for example, to make non-backwards-compatible API changes), provide changes to URL-routing (to match corresponding changes to web URLs), or even to &lt;em&gt;require&lt;/em&gt; users on older versions of the app to update (which we have never had to do). Echo has helped Artsy meet its business goals and building this remote configuration for the app was a great idea.&lt;/p&gt;

&lt;p&gt;However... Echo was built as a general-purpose remote-configuration-as-a-service, in anticipation of being used by other apps. That use never materialized. It had a web portal and a database and an API, all to only ever serve a single JSON response to the app. That&#39;s fine, sometimes engineers build things that don&#39;t end up getting used widely as we expected. Echo did one thing, and it did it really well. It ran on a Hobby Dyno on Heroku without incident for years.&lt;/p&gt;

&lt;p&gt;If you think about what I&#39;ve discussed so far in this post, you may realize that the app &lt;em&gt;depends&lt;/em&gt; on Echo. If Echo changes in some non-backwards-compatible way, then the app could break. For example, if Echo happened to stop working entirely, then the app could stop working too.&lt;/p&gt;

&lt;p&gt;The Echo service went without being deployed for several years. It worked, so why update it? The problem was that at some point, its major dependencies got yanked, so we could no longer build it locally or even deploy it at all. Yikes. I asked a web colleague for help and our conclusion was that it would take more effort to get Echo working with its existing code than it would be to rebuild the whole thing. Double yikes. And finally, Echo was running on the &lt;a href=&quot;https://devcenter.heroku.com/articles/cedar-14-stack&quot;&gt;Cedar-14 Heroku stack&lt;/a&gt;, which was already at end-of-life and had stopped receiving security updates. Triple yikes.&lt;/p&gt;

&lt;p&gt;(I have to note here that most of services at Artsy are deployed almost constantly – Echo was an odd one out. Echo never needed any updates, so it never needed to be deployed. However, we should have been keeping its dependencies up to date and deploying it regularly, which would have uncovered its problems sooner when they were still easily fixed. Anyway!)&lt;/p&gt;

&lt;p&gt;So we have a service, Echo, that we can&#39;t develop, and can&#39;t deploy, and isn&#39;t getting security updates from our cloud provider. And the app depends on it. Since Echo had always been a bit over-engineered for what it ended up being, I wondered what the minimal replacement could be. My plan was to replace the Echo server with an S3 bucket, an Artsy-controlled CNAME DNS record, and a small shell script that runs automatically on CI.&lt;/p&gt;

&lt;p&gt;Seriously! &lt;a href=&quot;https://github.com/artsy/echo/pull/39&quot;&gt;It worked&lt;/a&gt;! I made a proof-of-concept and then another engineer, &lt;a href=&quot;https://github.com/pvinis&quot;&gt;Pavlos&lt;/a&gt;, finished building the new infrastructure. Changes to the app&#39;s configuration are now done via GitHub pull requests (&lt;a href=&quot;https://github.com/artsy/echo/pull/63&quot;&gt;here is an example PR&lt;/a&gt;), which we can track over time (unlike the old web interface).&lt;/p&gt;

&lt;p&gt;I can&#39;t stress enough how much worry I had had about Echo&#39;s degrading status and the app&#39;s dependency on it. But! Everything about the change to S3 went smoothly.&lt;/p&gt;

&lt;p&gt;Okay, so new versions of app are now referring to the S3 bucket instead of the old Echo API. Great! But what about the older versions of the app that are still out there? They&#39;re still hitting the Echo API as intended, right?&lt;/p&gt;

&lt;a name=&quot;The.Problem&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Echo&#39;s API was still functioning, albeit on an EOL stack that we couldn&#39;t make any changes to. Since we can&#39;t rely on Heroku continuing to run the Echo API indefinitely, what could we do? Well, the easiest way to fix this would be to change Echo&#39;s Artsy-controlled CNAME record to point from the old Cedar-14 Heroku app to a new server app, which could pretend to be the old API for the sake of older app versions.&lt;/p&gt;

&lt;p&gt;This leads me to one of the most scary lines of code in the entire Artsy iOS codebase. See if you can spot the problem.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;https://echo-api-production.herokuapp.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For whatever reason, we never created an Artsy-controlled CNAME DNS record for Echo. We were just hitting the bare Heroku URL directly. That means that there are &lt;em&gt;seven years&#39;&lt;/em&gt; worth of Artsy app versions out there that &lt;em&gt;need&lt;/em&gt; to be able to continue hitting &lt;em&gt;that specific&lt;/em&gt; Heroku URL.&lt;/p&gt;

&lt;p&gt;😬&lt;/p&gt;

&lt;p&gt;This is what I meant earlier about how you need to think about properly-working code differently when you develop software that runs on someone else&#39;s hardware. If this was a server, this whole problem of old-code-hitting-outdated-APIs wouldn&#39;t exist. But because we ship apps as binaries that get ran on someone &lt;em&gt;else&#39;s&lt;/em&gt; hardware, we need to be aware of this kind of issue.&lt;/p&gt;

&lt;p&gt;That URL was fine when the code was written and it worked as intended for years. No one could have predicted, when it was added, that it would cause us headaches much later. Nor could we have anticipated that the Echo server&#39;s codebase would end up in such a state.&lt;/p&gt;

&lt;a name=&quot;The.Solution&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;This is the part of the blog post where I get to be a hero (at least in my head). The Heroku app running Echo was on Cedar-14 and while we couldn&#39;t make any changes to its code, we &lt;em&gt;could&lt;/em&gt; replace the code entirely. This would give us a new server running at the old URL. So I wrote up a small Express server to proxy HEAD and GET API requests from old iOS app versions to return the response body and headers that were expected. &lt;a href=&quot;https://github.com/artsy/echo/pull/59#&quot;&gt;The work is here&lt;/a&gt; if you&#39;re curious. The nice thing about Heroku, at least, is that if this had gone horribly wrong we still could have reverted back to the Cedar-14 app while we figured out our next steps.&lt;/p&gt;

&lt;p&gt;We will still need to keep this Heroku app running, indefinitely, which isn&#39;t ideal. Perhaps Artsy&#39;s migration to Kubernetes will never be &lt;em&gt;quite&lt;/em&gt; 100% complete, but that&#39;s a small price to pay for keeping users of our app happy.&lt;/p&gt;

&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It&#39;s not just bugs that you need to be aware of &lt;em&gt;accidentally&lt;/em&gt; shipping in your app binaries. You have to think about how the code that&#39;s running &lt;em&gt;as intended today&lt;/em&gt;, because it will continue to run for the foreseeable future. This means adding checks for non-200 response codes from APIs, being careful about third-party APIs, and thinking carefully about everything you ship. Apps are more than just their code; apps are everything that their code depends on, too.&lt;/p&gt;

&lt;p&gt;This is a lesson that I&#39;ve been teaching engineers for a long time, but it&#39;s only with our recent Echo changes that I&#39;ve come to understand, at a deeper level, what it means to take ownership of code. Yes, the bugs, and of course, the happy little accidents, but also the mundane interconnected dependencies that make software systems so complex. And, if I&#39;m being honest, that make software systems so much fun to work on, too.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Knowledge Shares For Great Good</title>
        <description>&lt;p&gt;Sharing knowledge! What a concept! &lt;a href=&quot;/blog/2020/09/29/becoming-mobile-first-at-artsy/&quot;&gt;In my recent blog post&lt;/a&gt;, I discussed &quot;Knowledge Share&quot; meetings (also known simply as &quot;Knowledge Shares&quot;, or abbreviated &quot;KS&quot;) and I want to dive deeper into them today. Last time, I described them as follows:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Knowledge Shares are a &lt;u&gt;structured&lt;/u&gt; time to facilitate &lt;u&gt;unstructured learning&lt;/u&gt;. Anyone can bring a topic to Knowledge Share, from a ticket that they&#39;re stuck on to an idea they have to a neat trick they recently learned.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These meetings were really instrumental in ramping up the Mobile Experience team, but their history goes back a bit further. Today, we&#39;re going to discuss the origins of Knowledge Shares at Artsy, how they&#39;ve evolved, the value they provide us as engineers, and how I&#39;d recommend you adopt them on your team.&lt;/p&gt;

&lt;p&gt;Let&#39;s go!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To my recollection, the Auctions team was the first at Artsy to start doing &quot;Knowledge Share&quot; meetings. It was late 2016, I think. We were a small team of about five engineers, but were spread across many different front-end apps and back-end microservices. To make sure Artsy&#39;s nascent auction business was a success, every engineer on the team had to have a working understanding of every one of our codebases. The team&#39;s lead, Alan, suggested that devote an hour each week to sharing knowledge so no one person would become a silo.&lt;/p&gt;

&lt;p&gt;The idea is simple enough: spend time working on something together. Kind of like pair programming, but with a slightly bigger group. Maybe there would be a ticket someone had that we would start together. Or maybe there had been a production incident that we wanted to investigate together. Maybe someone had an idea for a new technical approach to some problem and they wanted early feedback.&lt;/p&gt;

&lt;p&gt;I think this forum worked well for us because our team was small and had a high level of interpersonal trust. Leading a five-person &lt;a href=&quot;https://en.wikipedia.org/wiki/Mob_programming&quot;&gt;mobbing session&lt;/a&gt; could be really intimidating, and later I&#39;ll discuss how I&#39;ve since structured the Knowledge Shares that I lead to make everyone feel welcome contributing.&lt;/p&gt;

&lt;p&gt;And they worked great! Other engineers learned about the iOS front-end code that I had written, and I learned about the back-end systems that powered that front-end. This was important for the team because our response time to production incidents was critical – one extra minute of looking up docs or finding a specific URL could make the difference between a happy user winning their lot, or an unhappy user taking their business elsewhere.&lt;/p&gt;

&lt;p&gt;As time went on, other product teams started their own Knowledge Shares. They proliferated naturally throughout Artsy Engineering. When I started the Mobile Experience team in 2019, Knowledge Shares were one of the first recurring team meetings I scheduled. After a few months, I got really positive feedback about them. In fact, engineers wanted more of them. So I scheduled a second hour-long Knowledge Share each week.&lt;/p&gt;

&lt;p&gt;Today, Knowledge Shares are for more than just engineers. They are for product managers, designers, data analysts, and other team stakeholders. Sometimes engineers from other teams even join my team&#39;s Knowledge Shares, though scheduling becomes a hassle at a certain scale. We start each Knowledge Share with team-wide topics that apply to more than only engineers; we then move on to engineering-specific topics. This lets non-engineers still contribute while also letting them drop off so the engineers can dig into code.&lt;/p&gt;

&lt;p&gt;Here are some examples of things that we have used Knowledge Shares for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing early designs for upcoming project work.&lt;/li&gt;
&lt;li&gt;Going over work-in-progress pull requests and soliciting feedback on the technical approach.&lt;/li&gt;
&lt;li&gt;Spiking on big-picture projects together, to help us plan what work needs to happen and in which order.&lt;/li&gt;
&lt;li&gt;Exploring anonymized user sessions to learn more about how our product actually gets used in the real world.&lt;/li&gt;
&lt;li&gt;Investigating small quality-of-life problems with our codebase&#39;s developer experience and working on solutions.&lt;/li&gt;
&lt;li&gt;Brainstorming about how to address specific pieces of technical debt.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Topics range from the technical to the product-focused, from what has already shipped to what is still on the drawing board. This breadth of focus helps everyone on the team feel like they can contribute. We keep a shared document of evergreen topic ideas and everyone is encouraged to add to it. As Tech Lead, I also send Slack reminders before each meeting to solicit for timely topics.&lt;/p&gt;

&lt;p&gt;Throughout the normal course of our week, topics will naturally come up for discussion – topics that would normally need their own meeting to be scheduled. But instead, we can use the time we already have scheduled. For example: if an engineer has feedback on a new feature&#39;s design, we don&#39;t need to schedule a dedicated meeting for that conversation – we can use a Knowledge Share. It might feel like having recurring &quot;Knowledge Share&quot; meetings only adds more meetings to everyone&#39;s already-busy calendars. But in our experience, these Knowledge Shares prevent us from scheduling &lt;em&gt;yet more&lt;/em&gt; one-off meetings, so it balances out as a time-saver.&lt;/p&gt;

&lt;p&gt;As a Tech Lead, I like to use Knowledge Shares as an opportunity to reinforce the shared understanding that &lt;em&gt;learning&lt;/em&gt; is our paramount goal. That is to say, our goal isn&#39;t to &lt;em&gt;build&lt;/em&gt; some new feature, but is rather to &lt;em&gt;learn &lt;strong&gt;how&lt;/strong&gt; to build&lt;/em&gt; that new feature. That&#39;s why I emphasize in our Knowledge Shares that &lt;em&gt;learning is contributing&lt;/em&gt; (language which I added to our engineering onboarding docs). New team members might not have topics of their own, but they&#39;re encouraged to contribute by learning and by asking questions.&lt;/p&gt;

&lt;p&gt;When I described the origins of Knowledge Shares above, I said that they worked well on the early Auctions team because the team already had a high level of interpersonal trust. But looking back at those early days, I have to admit that I&#39;m not sure which came first: the Knowledge Shares, or the trust? Having now bootstrapped two product teams at Artsy, I can tell you that Knowledge Shares are a key tool I use as Tech Lead to get teams working well together, quickly. The experience of being confused (together) and then gaining understanding (together) is great for building up &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;the interpersonal trust that makes teams perform well&lt;/a&gt;. I just can&#39;t recommend Knowledge Shares enough!&lt;/p&gt;

&lt;p&gt;Today, Knowledge Shares at Artsy provide a variety of benefits. Among others, those benefits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;De-siloing information, to prevent any one engineer from becoming a single-point-of-failure for Artsy&#39;s systems.&lt;/li&gt;
&lt;li&gt;Getting the team used to working together, used to communicating with one another, and used to providing and accepting feedback.&lt;/li&gt;
&lt;li&gt;Surfacing problems developers commonly run into during day-to-day work – and then fixing them permanently, together.&lt;/li&gt;
&lt;li&gt;Fostering a sense that everyone &quot;owns&quot; this meeting (and, by extension, everyone &quot;owns&quot; the team&#39;s culture).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Okay, so, let&#39;s imagine I&#39;ve sold you on the idea of Knowledge Shares. Great! So where do you start? How do you get your team on board?&lt;/p&gt;

&lt;p&gt;If you are the team&#39;s lead then adopting Knowledge Shares is quite easy: send your team this blog post, tell them you want to try Knowledge Shares, try them out, and discuss what everyone thinks in an upcoming retrospective. Whether you make the Knowledges Shares mandatory, or just encourage everyone&#39;s participation, is up to you. They are mandatory for engineers on my team, but I accept the responsibility of making sure the meetings providing value to all engineers. I trust you to make these work well for however your team works.&lt;/p&gt;

&lt;p&gt;What if you&#39;re &lt;em&gt;not&lt;/em&gt; the team lead? That&#39;s okay, you have options. If you&#39;re comfortable, I would recommend following the same steps as above. Send your team this blog post, express interest in trying out a weekly Knowledge Share, and schedule something. (By showing this kind of leadership initiative, it won&#39;t be long before you find yourself leading your own team!) But if you want to avoid stepping on toes, you can also discuss this with your team&#39;s lead privately. Every team is different and I trust you to navigate your own team best.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/12/09/share-your-knowledge/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/12/09/share-your-knowledge/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Becoming Mobile First</title>
        <description>&lt;p&gt;It was a Wednesday, mid-summer 2019. I don&#39;t know which Wednesday specifically, but I know that it was &lt;em&gt;a&lt;/em&gt;
Wednesday because I was attending Artsy&#39;s weekly all-hands meeting. Two hundred colleagues were also there (many
dialing in remotely) and we were all listening to
&lt;a href=&quot;https://files.artsy.net/documents/artsy-names-new-ceo.pdf&quot;&gt;Artsy&#39;s new CEO&lt;/a&gt; talk about the company&#39;s direction.
Mike Steib had only been around for a few months at that point, getting to know the business. He was talking about
the product direction, and I was listening intently.&lt;/p&gt;

&lt;p&gt;With Artsy&#39;s iOS app, I knew there were only really two directions we could go. As I listened, I reflected on how
we had gotten here.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;When I joined Artsy in 2014, I joined the Mobile Team. It was an amazing team. While we were called the &quot;mobile&quot;
team, we only worked on Artsy&#39;s iOS apps and not the mobile website.&lt;/p&gt;

&lt;p&gt;By 2016, Artsy Engineering had grown to the size that having only a &quot;mobile team&quot; and a &quot;web team&quot; was no longer
working well. We dissolved both teams and distributed the engineers into
&lt;a href=&quot;https://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/&quot;&gt;new product teams&lt;/a&gt;, focused on
vertical aspects of Artsy&#39;s business. Auctions. Partner Success. Editorial. And so on. The idea was that each team
would have total autonomy over building products to support their slice of the business, and each would have the
engineering and design resources to build new features across both our web and iOS canvases.&lt;/p&gt;

&lt;p&gt;That structure worked well, and continues to work well today (we have continued re-organizing ourselves into new
teams to better meet business goals). But once we dissolved the mobile team, there was no longer anyone looking at
our iOS software holistically. The app had become a series of silos – each silo was internally consistent, but
distinct from each other. Often each silo was written in distinct programming languages (we had also started
adopting React Native).&lt;/p&gt;

&lt;p&gt;New iOS technologies had been created by Apple, but our teams weren&#39;t taking full advantage of them. We would
update to support the latest versions of Xcode and iOS in the free time between other tickets. It wasn&#39;t ideal. Of
the &lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;five original members of the Mobile Team&lt;/a&gt;, everyone else had moved on except
me.&lt;/p&gt;

&lt;p&gt;As a product, the app was languishing.&lt;/p&gt;

&lt;p&gt;Yet despite this, it was also hugely popular among our users and very important to Artsy&#39;s business. Art collectors
love our app! It gets a large percentage of our total sessions. Also, users place an outsized number of auction
bids and artwork inquiries using our app relative to the number of sessions on our website. In fact, the highest
value artwork transaction &lt;em&gt;ever&lt;/em&gt; to take place on Artsy was made on an iPad, running software that I helped build.
I&#39;m still pretty proud of that.&lt;/p&gt;

&lt;p&gt;So, Wednesday all-hands. I stood there, not sure of what would happen next. I could see Artsy either making a
massive investment in the app, or I could see Artsy cutting its losses and focusing on the software that we already
knew how to build. Which direction we took largely depended on this new CEO, who was now standing in front of us
all and describing the direction Artsy&#39;s product would take next.&lt;/p&gt;

&lt;a name=&quot;The.Dream&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Dream&lt;/h2&gt;

&lt;p&gt;Mike said something that caused a lot of raised eyebrows in the crowd. People were excited. &lt;em&gt;I&lt;/em&gt; was excited.
Artsy&#39;s product organization would shift to adopt a &quot;mobile-first strategy.&quot;&lt;/p&gt;

&lt;p&gt;Someone asked &quot;does this mean the app will reach feature parity with Artsy&#39;s website?&quot;&lt;/p&gt;

&lt;p&gt;Mike responded: &quot;No. It means that features are going to launch &lt;em&gt;first&lt;/em&gt; on the app. If anything, it&#39;s the &lt;em&gt;website&lt;/em&gt;
that will be catching up &lt;em&gt;to the app&lt;/em&gt;.&quot;&lt;/p&gt;

&lt;p&gt;I was kind of blown away! I mean, this had been the spirit of our original re-org in 2016, but that hadn&#39;t really
materialized. The app had continued to trail the website. At most, only one product team was ever building new
features for the app (usually which ever team I happened to be on). Shifting to this mobile-first strategy would be
a &lt;em&gt;massive&lt;/em&gt; undertaking, but I was keen.&lt;/p&gt;

&lt;p&gt;In August, an email landed in my inbox from Artsy&#39;s head of software. He wanted to spin up a new team to focus on
the app: the team would be responsible for supporting Artsy&#39;s new mobile-first product strategy. He wanted to know
what I thought, and he wanted to know if I was interested in leading the team.&lt;/p&gt;

&lt;p&gt;Honestly, it was a dream come true.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/rfc.png&quot; alt=&quot;Screenshot of the RFC for creating the Mobile Experience team&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are, a year later. This is the story of how Artsy created its Mobile Experience team. How we recovered a
languishing iOS app. How engineers helped shift the product organization to a mobile-first product strategy. And
how Artsy grew from &lt;em&gt;sometimes&lt;/em&gt; having &lt;em&gt;a&lt;/em&gt; team working on the app, to usually having &lt;em&gt;every&lt;/em&gt; team working on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/faq.png&quot; alt=&quot;Another screenshot of the RFC for creating the Mobile Experience team, describing frequently asked questions&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;Getting.Our.Bearings&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Getting Our Bearings&lt;/h2&gt;

&lt;p&gt;When Artsy created its new Mobile Experience team, we were already resource-constrained and so the new team would
need to be nimble. We had three full-time engineers (myself as tech lead, and two others), assisted by a designer,
product manager, and data analyst, who would each be spending only half their work time on the Mobile Experience
team. We needed to be scrappy. I&#39;m really proud of the work that that early team accomplished, and I look back
fondly on those first few months working with Sam, Joanna, David, Kieran, and Ani.&lt;/p&gt;

&lt;p&gt;The first thing we did was define our own mandate. What was this team responsible for? What was it &lt;em&gt;not&lt;/em&gt;
responsible for? &quot;Mobile Experience&quot; is pretty vague, and we had to answer a lot of upfront questions. Would we be
responsible for &lt;em&gt;all&lt;/em&gt; of Artsy&#39;s iOS software? No, just the main collector app. Would we be responsible for Artsy&#39;s
mobile website? No, that&#39;s too far-reaching. What about Android? Well, yes, eventually...&lt;/p&gt;

&lt;p&gt;After we decided on our mandate, the next step was to get really familiar with the existing app. We storyboarded
out all the existing screens and their connections to one another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/walkthrough.png&quot; alt=&quot;Screenshot of all the screens in our app laid out to discuss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/brainstorm.png&quot; alt=&quot;Screenshot of a brainstorm for app ideas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No one on our team had complete knowledge of every screen in the app, not even me, so exploring it together was a
great way to uncover what needed immediate attention. One example was our partner page, which displayed information
to our users about Artsy&#39;s partners: galleries, museums, auction houses, etc. We learned that the app actually used
an ancient web view, and it didn&#39;t even show the partner&#39;s &lt;em&gt;artworks&lt;/em&gt;. The artworks! Probably the most important
thing for it to do!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/old_partner.png&quot; alt=&quot;Screenshot of a presentation showing the old partner page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_partner.png&quot; alt=&quot;Screenshot of a presentation showing the new partner page, which looks much nicer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where &quot;being scrappy&quot; started to take root. Usually when developing new features, Artsy designers iterate
on a design before we plan on execution, then we implement, test, and deploy. The nice part of replacing something
that was &lt;em&gt;obviously broken&lt;/em&gt; was that we didn&#39;t feel beholden to this usual process; whatever we built would be
better than what we had. One engineer and our designer started the new partner page with a quick pencil sketch,
using the app&#39;s existing UI abstractions to design something that we could quickly build. Once we had a prototype,
the engineer and designer iterated. The whole project took only about three weeks.&lt;/p&gt;

&lt;a name=&quot;Early.Wins&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Early Wins&lt;/h2&gt;

&lt;p&gt;Learning about the app itself was critical, but equally important was learning about how our users &lt;em&gt;used&lt;/em&gt; the app.
We scheduled user interviews and, in the mean time, looked into our anonymized user analytics. Our data analyst
found a few representative sessions and we walked through each action that a user took. One big lesson here was how
much our app users relied on the app&#39;s search feature, which was still written in Objective-C and hadn&#39;t been
updated in a long time. We found that users would often search for the same query several times in the same
session. For example, users would search for &quot;banksy&quot;, wander off exploring some art, and then return to search for
&quot;bansky&quot; again. And again. And again.&lt;/p&gt;

&lt;p&gt;Our search implementation didn&#39;t show users their own recent searches, which would have greatly reduced the amount
of friction users experienced while exploring the art world in the app. Our other engineer took point working with
our designer to migrate the app&#39;s search to React Native. We also added some other features to our search page,
like adding entity subtitles so users would know if the result they were tapping on was an artwork, and artist, a
gallery, and so on. The whole project took about a month to complete, and we have continued to iterate on the app&#39;s
search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_search.png&quot; alt=&quot;Screenshot of a presentation showing the new search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In early conversations with company leadership, the Mobile Experience team settled on an... interesting strategy to
what we would prioritize. Our mission was &quot;to make the app not suck.&quot; This might seem harsh! But it came from a
place of caring. We knew how much better the app could be and we were motivated to make that a reality. In the
spring of 2020, the team felt like we had reached a point where the app no longer &quot;sucked&quot; – our goal now was &quot;to
make the app amazing.&quot;&lt;/p&gt;

&lt;p&gt;During 2020, we made a lot of changes to the app. We had built a new home page, a profile tab for users, granular
push notification settings, Sign In with Apple, and more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_home.png&quot; alt=&quot;Screenshot of a presentation showing the new home page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was really exciting to show off our progress to the rest of the company at our monthly Demo Day, especially in
those early months. The product team makes up only a quarter of our company and it was really cool to hear gallery
liaisons complementing our new partner page, or sales people complementing our refreshed home feed. I think that
people had gotten so used to the app not moving much at all that this sudden high velocity of development was as
exciting for them as it was for us.&lt;/p&gt;

&lt;a name=&quot;Setting.Up.Others.To.Succeed&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Setting Up Others To Succeed&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s goal for the Mobile Experience team was explicitly &lt;em&gt;not&lt;/em&gt; to centralize all our iOS feature development, and
so our mandate included much more that just working on iOS software ourselves. We wanted to sit between a typical
product team and a &quot;platform&quot; team, to provide infrastructure and assistance so any team at Artsy could develop
their own iOS feature. This was a big challenge, and required work at the individual and team levels.&lt;/p&gt;

&lt;p&gt;The first step was apparent before we even created the Mobile Experience team. Artsy Engineering runs skills
surveys every six months, and we knew that building iOS software in React Native was something Artsy engineers
weren&#39;t really familiar with, but that they really wanted to learn more about. I worked with the Engineering team&#39;s
Peer Learning Working Group to design a curriculum – big shout out to Christina and Adam for their help here!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2019/12/03/ios-learning-group/&quot;&gt;The iOS Learning Group took four weeks to deliver four lessons&lt;/a&gt;.
The learners were mostly web engineers, so I emphasized the familiar parts of writing React Native software. I also
provided weekly office hours for learners to get assistance with homework. I even stretched my wings as an
educator, developing new skills around curriculum design and delivery. After the course, learners responded
positively to the experience and we have integrated lessons learned from the iOS Learning Group into subsequent
peer learning groups.&lt;/p&gt;

&lt;a name=&quot;Aligning.Product.Releases&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Aligning Product Releases&lt;/h2&gt;

&lt;p&gt;Now that engineers had a solid grasp of how to build software in our application, we could re-align our product
development process around iOS. I can&#39;t speak to the design side of this, but from a product perspective the most
critical milestone was defining a regular 2-week app release cadence. Let me explain.&lt;/p&gt;

&lt;p&gt;Prior to the Mobile Experience team, we released the app pretty irregularly. We would release whenever we had
something big to release, basically. There are two major flaws with that approach. The first problem is that since
each release was bigger, each release was scarier. No one really felt confident releasing app updates. The second
problem was that large pieces of work tended to get coupled together. This came to a head last summer when we were
blocked from releasing an redesigned artwork view because we were waiting for a major overhaul to Artsy&#39;s GraphQL
API to be completed. Without guidance or structure, different teams were building big projects and both had their
changes in our default branch – it was a bit chaotic.&lt;/p&gt;

&lt;p&gt;These two problems are incidental to how we worked at Artsy but there is another, inherent problem to developing
mobile apps:
&lt;a href=&quot;https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/&quot;&gt;deploying iOS software is weird&lt;/a&gt;.
Engineers, designers, and product managers at Artsy are used to being able to quickly and cheaply deploy software
to the &lt;em&gt;web&lt;/em&gt;, not the App Store. iOS software is deployed to our user&#39;s hardware, not to servers we control, which
introduces the possibility that users might not upgrade. Software we shipped years ago is still being run today –
we have the analytics to prove it. Not to mention that every app update has to go through Apple&#39;s App Store review
process. Getting our product team aligned on a release schedule might also help us get aligned on the weirdness of
deploying iOS software.&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;iOS developers! I have a question for you. I hear a lot about teams releasing app updates on a 2-week cadence, to increase user confidence/App Store ranking/team morale/etc.&lt;br&gt;&lt;br&gt;Have any teams shared their experiences with this? Bonus points for any quantitative data. Thanks!! 🤗&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href=&quot;https://twitter.com/ashfurrow/status/1184845989510811649?ref_src=twsrc%5Etfw&quot;&gt;October 17, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As the Mobile Experience team formed, I reached out to other mobile teams to find out about how they structured
regular releases. &lt;a href=&quot;https://twitter.com/Cform&quot;&gt;Matt Greenwell&lt;/a&gt; from BuzzFeed was really helpful in particular,
outlining their experience of the pros and cons of a regular release cadence. We implemented a two-week release
cadence so that all product teams could align their own feature development and testing around this predictable
structure. We also created documentation for teams to hide their in-progress work behind feature flags. And
finally, we refined our app QA process; teams would QA their own features and bug fixes while the Mobile Experience
team would used a QA script to test the app &lt;em&gt;generally&lt;/em&gt;, every other Monday, before submitting an update to the App
Store.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/cadence.png&quot; alt=&quot;Calendar describing our cadence on an example sprint&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;Making.Deploys.Not.Scary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Making Deploys Not Scary&lt;/h2&gt;

&lt;p&gt;To further help teams get into the habit of developing and releasing iOS software often, we created nightly betas.
We also adopted a clever idea from our web colleagues: deploy blocks. In case of a technical reason to not release
a beta, we create a block and the CI job that deploys the beta would fail with a descriptive message. This reduced
a lot of chatter in Slack where engineers would ask &quot;could I make a new beta?&quot; Instead, engineers usually just wait
for the nightly beta. And if they get impatient, they now default to action (their beta deploy will fail if we set
up a block).&lt;/p&gt;

&lt;p&gt;All of this was automated through &lt;a href=&quot;https://fastlane.tools&quot;&gt;fastlane&lt;/a&gt; on our CI provider. We had been using fastlane
for a long time at Artsy, but the Mobile Experience team took the time to share knowledge of how it worked. Any
engineer at Artsy can now make a beta (&lt;code&gt;make deploy&lt;/code&gt;) or promote the latest beta to an App Store submission
(&lt;code&gt;make promote_beta_to_submission&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We deploy more often and, consequently, each deploy is less scary. And everyone is aware of the need to hide
in-progress work behind feature flags. At this point, updates to our app are mundane, predictable, and boring. Just
the way we like them.&lt;/p&gt;

&lt;a name=&quot;Being.Generous.With.Our.Time&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Being Generous With Our Time&lt;/h2&gt;

&lt;p&gt;Our QA and deploy process touches on something I want to go into more detail about, which is how the Mobile
Experience team helped support other product teams. I described earlier how Mobile Experience sits somewhere
between a normal product team and a platform team, and we leveraged that to our advantage. It would have been easy
to become primarily a supportive team, and leave feature development up to others. However, that would leave us
unaware of how day-to-day development &lt;em&gt;feels&lt;/em&gt; in the app. We own the platform, and that includes the developer
experience. By sitting in this ambiguous in-between state, we stayed aware of both the needs of everyday
developers, and the needs of our platform.&lt;/p&gt;

&lt;p&gt;I would encourage engineers from other teams to ask us for help, which led to a lot of pairing sessions. To be
honest, I think it probably interfered with our productivity, but it was worth it. A half hour of my time spent
pairing with a colleague might save them three hours of banging their head against Xcode. But it&#39;s not the time
saved that I care about, it&#39;s the head-banging. I want engineers at Artsy to feel empowered to build their own iOS
software, and that&#39;s only going to happen if they feel comfortable and supported.&lt;/p&gt;

&lt;p&gt;When the Galleries team kicked off their ambitious Viewing Rooms project, we helped them get started by lending an
engineer to them for a few sprints. When they ran into problems, we were generous with our time by pairing with
them. When they were nearing completion, we helped them test the new feature. This all culminated in a smooth
release.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/new_loader.png&quot; alt=&quot;Screenshot of a presentation showing the new home page&#39;s new loading indicator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speaking of Developer Experience, we took a keen interest in standardizing our best practices and modernizing the
codebase. We
&lt;a href=&quot;https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/docs/preferred_practices.md&quot;&gt;documented how we wanted the app&#39;s codebase to look&lt;/a&gt;
and set up
&lt;a href=&quot;https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/tslint-rules/useWrappedComponentsRule.js&quot;&gt;processes like lint rules&lt;/a&gt;
to encourage developers to follow our best practices. We also invited any engineer at Artsy to join our
twice-weekly Knowledge Share meetings (I&#39;ll discuss these in-depth shortly). We looked for bottle necks in the
development process and found many problems, which we addressed.
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3022&quot;&gt;We combined the Native iOS and React Native repositories&lt;/a&gt; (which had
historically been separated). &lt;a href=&quot;https://github.com/artsy/eigen/pull/3105&quot;&gt;We overhauled the CI configuration&lt;/a&gt; to
leverage heavy caching – average build times dropped from fifteen minutes to less than five.
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3210&quot;&gt;And we adopted stricter TypeScript compiler settings&lt;/a&gt; so that engineers
would be forced to deal with nullability and other causes of bugs. (Hey, sometimes you need a carrot and sometimes
you need a stick.)&lt;/p&gt;

&lt;p&gt;The React Native community has grown a lot since 2016. If Artsy were to begin our adoption of React Native today,
we would be really well-supported by a community that has defined best practices, documented standard approaches to
problems, and a consolidated opinion on what a React Native codebase should &quot;feel&quot; like. None of that existed in
2016, and our early architectural decisions don&#39;t really reflect contemporary best practices. We continue working
to bring our codebase closer to resembling a fresh project created with &lt;code&gt;react-native init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m extraordinarily happy with how things have shaped up, and in the direction we continue to move. This is all an
ongoing process, and should remain an ongoing process. For example, engineers were still facing a bottleneck with
core parts of our app&#39;s routing logic that were in Objective-C, so we recently
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3771&quot;&gt;moved all routing to TypeScript&lt;/a&gt;. Not only does moving code out of
Objective-C make it easier for everyone to build, but it also ladders up to a cross-platform Artsy app.&lt;/p&gt;

&lt;p&gt;We still have older practices in the app that we want to migrate away from, like testing with Enzyme. But overall,
things are looking good!&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/IEn2_WSKFHw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;a name=&quot;Knowledge.Shares&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Knowledge Shares&lt;/h2&gt;

&lt;p&gt;We achieved most of these big, infrastructural changes in meetings called &lt;em&gt;Knowledge Shares&lt;/em&gt;, which I mentioned
earlier. I should write a dedicated blog post on these (update: &lt;a href=&quot;/blog/2020/12/09/share-your-knowledge/&quot;&gt;I did write one&lt;/a&gt;), but in short: Knowledge Shares are a &lt;em&gt;structured&lt;/em&gt; time to
facilitate &lt;em&gt;unstructured learning&lt;/em&gt;. Anyone can bring a topic to Knowledge Share, from a ticket that they&#39;re stuck
on to an idea they have to a neat trick they recently learned. We set aside these two hours a week to discuss
whatever the team wants, and we don&#39;t only invite engineers.&lt;/p&gt;

&lt;p&gt;New feature designs, product roadmaps, and data analyses are often brought up by our non-engineering colleagues; we
discuss these at the beginning of the meetings to make sure everyone&#39;s time is respected. Throughout the week,
someone will raise a question in Slack. Before we had Knowledge Share meetings, we might schedule a dedicated
half-hour meeting to discussing this question. But instead, we now say &quot;alright let&#39;s chat about this at tomorrow&#39;s
KS.&quot; Usually the discussion lasts a lot less than a half hour, so we save time and needless context-switching.&lt;/p&gt;

&lt;p&gt;Knowledge Shares are also a manifestation of my philosophy of tech leadership, which is this: none of us have built
an Artsy before, so instead of optimizing for building an Artsy, let&#39;s optimize for &lt;em&gt;learning&lt;/em&gt; how to build an
Artsy. The best Artsy we can build. And as a natural byproduct, an Artsy gets built. But it&#39;s the &lt;em&gt;learning&lt;/em&gt; that
is treated as the paramount goal.&lt;/p&gt;

&lt;p&gt;Like I said, I owe you a whole blog post on Knowledge Share meetings. I hope I have conveyed how important these
scheduled &quot;structured unstructured learning&quot; times have been for us.&lt;/p&gt;

&lt;a name=&quot;The.Results&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Results&lt;/h2&gt;

&lt;p&gt;So where does that leave us? It&#39;s been a year and change, where are we now? Well I&#39;m happy to say that we&#39;ve made a
huge impact. We&#39;ve gone from only having (at most) one product team writing iOS software at a time to having nearly
&lt;em&gt;every&lt;/em&gt; product team building iOS software. Artsy is through the woods of its transition to a mobile-first product
strategy. We still have a ways to go, but it feels like we have finally realized the dream we had in 2016 where
every team is fully equipped and empowered to deliver on their own business goals, across all of Artsy&#39;s canvasses.&lt;/p&gt;

&lt;p&gt;Our App Store ranking has shot through the roof – not surprising considering our &quot;make it not suck&quot; and then &quot;make
it amazing&quot; approach. Artsy&#39;s iOS app rating now sits at a stout 4.7.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-09-29-becoming-mobile-first-at-artsy/ratings.png&quot; alt=&quot;Screenshot of a graph showing an increasing average App Store rating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We&#39;ve also started tracking our iOS developer experience within Artsy. We know exactly where we still need work
because we ask our engineers where they need support.&lt;/p&gt;

&lt;p&gt;It&#39;s taken a mammoth effort, and there&#39;s so much more that I could talk about, but this blog post is long enough
already! Looking at the work we&#39;ve done, the ways we&#39;ve done it, and the results of our effort... I feel ecstatic.&lt;/p&gt;

&lt;a name=&quot;Next.Steps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;All that said, Artsy&#39;s product team is currently embarking on another reorganization. With so much technical and
product debt paid off, Artsy has evolved past the need for a dedicated Mobile Experience team. It&#39;s bittersweet,
but I&#39;m proud to say that the new Collector Experience team is about to be born. Our team will continue to own the
mobile platform, including its holistic user experience and day-to-day developer experience, but we&#39;ll have an
expanded mandate. That mandate includes a cross-platform Artsy app that will work for collectors on Android as well
as iOS.&lt;/p&gt;

&lt;p&gt;The Mobile Experience team has grown, too. Since we started last year with just a few engineers and limited product
support, we now boast a full roster of engineers and product support. I want to thank everyone on the team,
currently: David, Sam, Brian, Mike, Brittney, Pavlos, and Mounir. You have made the past year an incredibly
rewarding experience for me as I learn the ropes of technical leadership. I&#39;m so proud of what we&#39;ve built together
and I&#39;m excited for what the new Collector Experience team is going to do next!&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/</guid>
        
        
        <category>culture</category>
        
        <category>eigen</category>
        
        <category>emission</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>node</category>
        
        <category>reactnative</category>
        
        <category>teams</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Relay Pagination Containers Demystified</title>
        <description>&lt;p&gt;In 2017, Artsy adopted &lt;a href=&quot;https://relay.dev/en/&quot;&gt;Relay&lt;/a&gt; in both its front-end web and iOS codebases (using React and
React Native, respectively). Generally speaking, this investment has turned out very well for us! Relay empowers
product teams to quickly iterate on new features and to share common infrastructure across web and iOS codebases.
However, most of the original engineers who pioneered using Relay at Artsy have since moved on to their next role;
this has left a knowledge gap where Artsy engineers are comfortable &lt;em&gt;using&lt;/em&gt; Relay, but they don&#39;t totally
understand how it works.&lt;/p&gt;

&lt;p&gt;This is a problem as old as software engineering itself, and it has a simple solution: learn and then teach others.
We&#39;ll be driving a peer learning group centering around Relay, but today we are going to dive into the part of
Relay that comes up the most in requests for pairing: getting Relay pagination to work. (Note: we&#39;re going to use
plain old Relay and not &lt;a href=&quot;https://github.com/relay-tools/relay-hooks&quot;&gt;relay-hooks&lt;/a&gt;.)&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;My goal with this post is to show my thought process when trying to learn about, and clean up our use of, Relay
pagination containers. This post emphasizes the &lt;em&gt;demystifying&lt;/em&gt; process and not so much the &lt;em&gt;Relay pagination
containers&lt;/em&gt; themselves – we&#39;ll briefly cover some Relay fundamentals before diving into a case study on how
problematic code proliferates through copy-and-paste.&lt;/p&gt;

&lt;p&gt;Let&#39;s back up and talk a little bit about what Relay is and how it works. Relay is a framework that glues React
components and GraphQL requests together. React components define the data they need from a GraphQL schema in order
to render themselves, and Relay handles actually fetching GraphQL requests and marshalling data into the React
component tree. It is very efficient because of build-time optimizations by the Relay compiler.&lt;/p&gt;

&lt;p&gt;The simplest use of Relay is a &lt;a href=&quot;https://relay.dev/docs/en/fragment-container&quot;&gt;fragment container&lt;/a&gt;, which is created
from a React component and a &lt;a href=&quot;https://blog.logrocket.com/graphql-fragments-explained/&quot;&gt;GraphQL fragment&lt;/a&gt;. (We&#39;re
going to skip over how the GraphQL query is made, but
&lt;a href=&quot;https://relay.dev/docs/en/query-renderer&quot;&gt;here are the docs on query renderers&lt;/a&gt; if you&#39;re curious.)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Text&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtistFragmentContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist_artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Relay&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;naming&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conventions&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;here&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;(At Artsy, we use &lt;a href=&quot;https://github.com/relay-tools/relay-compiler-language-typescript&quot;&gt;TypeScript with Relay&lt;/a&gt;, but
for this blog post we&#39;ll stick to JavaScript.)&lt;/p&gt;

&lt;p&gt;So we have a plain React component that gets some props, and a Relay fragment container that wraps it, defining the
data that the component needs.&lt;/p&gt;

&lt;p&gt;There are other types of Relay containers beyond simple fragment containers.
&lt;a href=&quot;https://relay.dev/docs/en/refetch-container&quot;&gt;Refetch containers&lt;/a&gt; are like fragment containers except you can
refetch their contents from your GraphQL server (in response to, for example, user interaction). Using a refetch
container is very similar to using a plain fragment container. But today, we want to talk about
&lt;a href=&quot;https://relay.dev/docs/en/pagination-container&quot;&gt;pagination containers&lt;/a&gt;, which use a GraphQL construct called
&lt;em&gt;connections&lt;/em&gt; to show page after page of data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apollographql.com/blog/explaining-graphql-connections-c48b7c3d6976/&quot;&gt;GraphQL connections&lt;/a&gt; are beyond
the scope of this blog post, but they are a way to fetch lists of data without running into the limitations of
returning a simple array. Connections can return metadata about their results, like how many total results there
are, and use cursors (rather than page numbers) for paginating. They also handle when items are inserted or deleted
from the results between requests for pages –
&lt;a href=&quot;https://artsy.github.io/blog/2020/01/21/graphql-relay-windowed-pagination/&quot;&gt;check out this blog post&lt;/a&gt; for more
info on how to use connections with Relay.&lt;/p&gt;

&lt;p&gt;Pagination containers take considerably more setup than plain fragment containers, and the setup itself is very
fickle. Things simply will not work until you get the configuration &lt;em&gt;exactly correct&lt;/em&gt;, and then everything works
perfectly. The setup is largely repeated boilerplate, and what I&#39;ve noticed (from other engineers but also myself)
is that the boilerplate for new pagination containers gets copy-and-pasted from existing ones. We will see how this
leads to small problems getting propagated throughout the codebase, and leads to engineers not feeling confident
when working in pagination containers.&lt;/p&gt;

&lt;p&gt;So let&#39;s modify the Relay container above to fetch a list of the artist&#39;s artworks. This is a very simple example,
only used to illustrate how to use pagination containers.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;46&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;47&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;48&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;49&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;50&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;51&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;52&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;53&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;54&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;55&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;56&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;57&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;58&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;59&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;60&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;61&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;62&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;63&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;64&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;65&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Text&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;cm&quot;&gt;/* Render each artwork */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Text&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasMore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadMore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Load next page&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtistFragmentContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createPaginationContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist_artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argumentDefinitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Artist_artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;getConnectionFromProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artworks&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;getFragmentVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prevVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;getVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fragmentVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtistArtworksQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artist_artist&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Wow, that&#39;s a lot! I don&#39;t want to get too bogged down in details, so let&#39;s break this apart at a high level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We changed the React component to show a list of artworks and include a button to load the next page.&lt;/li&gt;
&lt;li&gt;We changed from &lt;code&gt;createFragmentContainer&lt;/code&gt; to using &lt;code&gt;createPaginationContainer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We added GraphQL fragment variables for &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;cursor&lt;/code&gt; to be passed through to the new
&lt;code&gt;artworksConnection&lt;/code&gt;, which we also added.&lt;/li&gt;
&lt;li&gt;Finally, we added a whole new configuration parameter to &lt;code&gt;createPaginationContainer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This last bit is the part where I see the most frustration. Hopefully what follows will clear things up.&lt;/p&gt;

&lt;p&gt;I like to always start by &lt;a href=&quot;https://relay.dev/docs/en/pagination-container&quot;&gt;reading the docs&lt;/a&gt;. The &lt;code&gt;direction&lt;/code&gt; key
is the direction that we paginate through, either &lt;code&gt;&quot;forward&quot;&lt;/code&gt; or &lt;code&gt;&quot;backward&quot;&lt;/code&gt;. &lt;code&gt;getConnectionFromProps&lt;/code&gt; is a
function that returns the GraphQL connection, in case the query has more than one. And &lt;code&gt;query&lt;/code&gt; is used to fetch any
specific page of results.&lt;/p&gt;

&lt;p&gt;Those all makes sense to me, but then we arrive at the real gotchas: &lt;code&gt;getFragmentVariables&lt;/code&gt; and &lt;code&gt;getVariables&lt;/code&gt;. The
docs are helpful, but only if you understand
&lt;a href=&quot;https://relay.dev/docs/en/runtime-architecture.html&quot;&gt;the internals of how Relay works&lt;/a&gt;. Relay has a sophisticated
architecture that delivers some really well-performing code, but its abstractions sometimes
&quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Leaky_abstraction&quot;&gt;leak&lt;/a&gt;&quot; and you have to deal with underlying implementation
details of Relay (like &lt;a href=&quot;https://relay.dev/docs/en/relay-store&quot;&gt;the Relay store&lt;/a&gt;) which you don&#39;t need to know about
&lt;em&gt;most&lt;/em&gt; of the time.&lt;/p&gt;

&lt;p&gt;So what are these two functions? Let&#39;s return to the docs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFragmentVariables&lt;/code&gt; is used when re-rendering the component, to retrieve the previously-fetched GraphQL
response for a certain set of variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getVariables&lt;/code&gt; is used when actually fetching another page, and its return value is given to the &lt;code&gt;query&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think of &lt;code&gt;getFragmentVariables&lt;/code&gt; as a kind of caches key for lookup in Relay&#39;s internal store. Our implementation
of &lt;code&gt;getFragmentVariables&lt;/code&gt; above doesn&#39;t really do anything interesting, but a connection that accepted &lt;code&gt;sort&lt;/code&gt; or
&lt;code&gt;filter&lt;/code&gt; parameters would need to return those to avoid lookup collisions when the user changed sort and filter
options.&lt;/p&gt;

&lt;p&gt;Now for &lt;code&gt;getVariables&lt;/code&gt;, which are the variables used for the &lt;code&gt;query&lt;/code&gt; later on. It really ought to be named
&lt;code&gt;getQueryVariables&lt;/code&gt;, I think. But I digress.&lt;/p&gt;

&lt;p&gt;Every implementation of &lt;code&gt;getFragmentVariables&lt;/code&gt; I could find at Artsy was identical, which makes sense because &lt;em&gt;that
is the default implementation&lt;/em&gt;. We shouldn&#39;t be defining this option at all! As far as I can tell, Artsy started
with a few pagination containers that supplied this parameter unnecessarily and it got copy-and-pasted throughout
our codebases.&lt;/p&gt;

&lt;p&gt;After revisiting the docs, I noticed other optional parameters that don&#39;t need to be defined either. Let&#39;s rewrite
the call to &lt;code&gt;createPaginationContainer&lt;/code&gt; to only supply the parameters that are required:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtistFragmentContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createPaginationContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist_artist&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argumentDefinitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Artist_artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;getVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fragmentVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtistArtworksQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artist_artist&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$count&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is a lot nicer! By not specifying unnecessary options, we have a smaller surface area to make mistakes in. We
also have fewer overloaded terms, like &quot;variables&quot;, so now it&#39;s more obvious that &lt;code&gt;getVariables&lt;/code&gt; supplies data for
the &lt;code&gt;query&lt;/code&gt; below it.&lt;/p&gt;

&lt;p&gt;I&#39;ve already &lt;a href=&quot;https://github.com/artsy/eigen/pull/3711&quot;&gt;sent a pull request&lt;/a&gt; to clean up our use of pagination
containers in our React Native app, and will be following up on the web side next. But I wouldn&#39;t have discovered
this if I hadn&#39;t really dug into the docs, which I only did so that I could write this blog post. Earlier I said
that the solution to a knowledge gap is simple: learn, and then teach. I learned a lot about Relay today, and I
hope this blog post illustrates the value in the learn-then-teach approach.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/08/31/relay-pagination-containers-demystified/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/08/31/relay-pagination-containers-demystified/</guid>
        
        
        <category>culture</category>
        
        <category>react</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>Servers for Everyone: Review Apps @ Artsy</title>
        <description>&lt;p&gt;This blog post is going to motivate and describe Artsy&#39;s adoption and evolution
of the usage of review apps.&lt;/p&gt;

&lt;p&gt;This first part of this post covers a couple of common problems where
topic-specific servers (i.e. review apps) are useful.&lt;/p&gt;

&lt;p&gt;The rest of the post describes Artsy&#39;s history with review app automation via
incremental problem solving and the composition of a few well-known technologies.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Problem.1.0:.A.Single.Shared.Staging.Environment&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Problem 1.0: A Single Shared Staging Environment&lt;/h2&gt;

&lt;p&gt;At Artsy, we have a sizable engineering organization: ~40 engineers organized
across many teams. Engineers on those teams work on many codebases, some are
exclusive to a team, but many codebases are worked on by engineers across many
teams. Artsy&#39;s website (www.artsy.net), &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, is a good example of such a shared
service.&lt;/p&gt;

&lt;p&gt;These different teams of developers working on a shared service have (mostly
hidden) dependencies upon each other, most visible when a shared service is being
deployed to production.&lt;/p&gt;

&lt;p&gt;Let&#39;s work the following example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Team A is hard at work finishing up a new feature (say a new search
page for a list of art auctions) on Service S and is now doing a final round
of QA before deploying to production&lt;/li&gt;
&lt;li&gt;Team B is fixing a bug in an unrelated part of Service S&lt;/li&gt;
&lt;li&gt;Team B confirms that the bug was squashed on staging&lt;/li&gt;
&lt;li&gt;Team B deploys Service S to production&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Artsy&#39;s production deployment flow is rooted in a GitHub Pull Request, meaning
that the commits that differ between staging (on the &lt;code&gt;staging&lt;/code&gt; Git branch) and
production (on the &lt;code&gt;release&lt;/code&gt; Git branch) are clear to whomever is managing a
deploy (&lt;a href=&quot;https://github.com/artsy/force/pull/6106&quot;&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While it&#39;s great that our deploys are easy to understand, ensuring that a deploy
of a service is safe &lt;em&gt;requires communicating with the teams that contributed
code to ensure that their work is &quot;safe to deploy&quot;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&quot;Safe to deploy&quot; might mean different things depending on the nature of the
work.&lt;/p&gt;

&lt;p&gt;For example, Team A&#39;s new list of art auctions might require an API endpoint in
another Service Z to be deployed for their part of the deploy of Service S to
be safe to deploy. Team B&#39;s bugfix might just requires a quick visual confirmation.&lt;/p&gt;

&lt;p&gt;Suffice to say, it&#39;s &lt;em&gt;hard to independently confirm that another team&#39;s work is
safe to deploy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Despite the mitigation strategies discussed next, there&#39;s risk of deploying unsafe
code whenever a single staging environment is used across many teams.&lt;/p&gt;

&lt;a name=&quot;Shared.Staging.Mitigation.Strategies&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Shared Staging Mitigation Strategies&lt;/h4&gt;

&lt;p&gt;There are a couple of ways Artsy mitigates against the possible pitfalls of a
shared staging environment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Having a culture of quickly deploying code to production&lt;/p&gt;

&lt;p&gt; By building a culture that views frequent deploys positively, there&#39;s, on average,
less diff in every deploy, mitigating the risk of unintentionally deploying code
that&#39;s not safe to deploy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using automated quality processes geared towards a stable staging environment&lt;/p&gt;

&lt;p&gt; We do our best to feel as confident as possible in a change &lt;em&gt;before it is deployed
 to staging&lt;/em&gt; by creating automated tests for changes, sharing visual changes over
 Slack and in PRs, and other strategies relevant to the work at hand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communicating deploys&lt;/p&gt;

&lt;p&gt; When deploying a service, Artsy engineers typically send a message to our #dev
Slack channel notifying of their plan to deploy a particular service, cc&#39;ing the
engineers that are involved in other PRs that are part of the deploy. In the example
above, an engineer on Team B would notify relevant stakeholders of Team A, giving
that team the opportunity to flag if their work is not yet safe to deploy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While these strategies are impactful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Semi-unstructured communication is prone to breakdown: the notified engineers
on Team A might be pairing or in a meeting and Team B deploys anyways.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Without a true continuous delivery model, it&#39;s a challenge to operationalize
very frequent production deploys. Moreover, the problem compounds as the team
grows and the velocity of work increases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Particularly when working in a large distributed system, automated testing at
the individual service level can only provide a certain level of safety for a
change. Visual changes which require correctness on different viewports and devices
are, pragmatically, often best to test manually.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If only there was a way to allow Team A and B to work without risking stepping
on each other toes!&lt;/p&gt;

&lt;p&gt;We&#39;ll discuss how review apps provide this safety, but first another related
problem.&lt;/p&gt;

&lt;a name=&quot;Problem.2.0:.Complex.Work.Needs.Many.Eyes&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Problem 2.0: Complex Work Needs Many Eyes&lt;/h2&gt;

&lt;p&gt;But before it gets better, it&#39;s going to get a bit worse.&lt;/p&gt;

&lt;p&gt;While working on any mature distributed system is a challenge, some work is
particularly challenging or risky. Generally, risk is reduced when many
skilled eyes can review the risky thing in an environment that closely mimics
the production environment.&lt;/p&gt;

&lt;p&gt;This class of work might include changes to authorization flows, page
redesigns or infrastructural upgrades (e.g. a NodeJS upgrade).&lt;/p&gt;

&lt;p&gt;For example, to feel safe deploying &lt;a href=&quot;https://github.com/artsy/force/pull/5697&quot;&gt;a major version upgrade of Artsy&#39;s design
system in Force&lt;/a&gt; the most pragmatic way forward was
to deploy that PR to a server where other engineers could collaborate on QA.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If a single shared staging environment is the only non-production server to
deploy to, the chances that work lands on staging in an unsafe state is high&lt;/em&gt;. While
staging being unsafe isn&#39;t &lt;em&gt;itself&lt;/em&gt; a bad thing, many bad things can result:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[Bad] Blocked Deploys&lt;/p&gt;

&lt;p&gt; If staging is unsafe and this dangerous state is discovered, then top priority
is getting a service back into a safe state. While working to get a service
back to a healthy state, new features can&#39;t be delivered.&lt;/p&gt;

&lt;p&gt;  In aggregate, this can be a sizeable productivity loss.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Worse] Unsafe Deploys&lt;/p&gt;

&lt;p&gt; If staging is unsafe and this dangerous state is not discovered before a production
deploy (for example, the unsafe code might be from another team, as described above),
then end-users might interact with a service that just isn&#39;t working. No good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Terrible] Fear&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Fear is the mind-killer.
 &lt;a href=&quot;https://www.goodreads.com/quotes/2-i-must-not-fear-fear-is-the-mind-killer-fear-is&quot;&gt;Dune&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; Alright, a bit over the top, but the risk of unsafe or blocked deploys can
implicitly or explicitly result in teams shying away from complex work.&lt;/p&gt;

&lt;p&gt;  This avoidable fear might result in increased technical debt or not taking on
certain projects.&lt;/p&gt;

&lt;p&gt;  It&#39;s generally bad for business and does not lead to a pleasant work environment!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;Problem.Recap..amp..Review.App.Introduction&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Problem Recap &amp;amp; Review App Introduction&lt;/h2&gt;

&lt;p&gt;To recap, there is an increased risk of unsafe or blocked deploys whenever there
is a single staging environment for a shared service. Certain types of
(incredibly useful) changes require interactive review on a live server
before we feel comfortable with those changes, which magnifies the risk of a unsafe or
blocked deploy.&lt;/p&gt;

&lt;p&gt;Review apps are simply other staging environments that are easy to spin up and
are deployed with the version of the service that you are working on.&lt;/p&gt;

&lt;p&gt;By QA-ing on a review app instead of a shared staging environment, teams can
take their time ensuring the safety of their changes, removing the risks
detailed above.&lt;/p&gt;

&lt;p&gt;Larger infrastructure upgrades (including upgrades to the
underlying K8s configuration, in addition to app-level changes) can sit on a
server for hours or days, allowing any slow-moving issue to show itself in a
lower risk environment.&lt;/p&gt;

&lt;p&gt;Artsy has iterated on its review app tooling to the point where Team A and Team B
can each deploy their changes to isolated servers of our main website, Force,
on a single &lt;code&gt;git push&lt;/code&gt; to a branch matching a naming convention.&lt;/p&gt;

&lt;p&gt;The rest of this post describes Artsy&#39;s evolution of its review app tooling
and areas for continued improvement.&lt;/p&gt;

&lt;a name=&quot;Review.App.Tooling&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Review App Tooling&lt;/h2&gt;

&lt;a name=&quot;Heroku.Days&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Heroku Days&lt;/h3&gt;

&lt;p&gt;In the beginning, Artsy deployed most services on Heroku. There were fewer engineers
and teams, so the engineering organization was less impacted by the problems described above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/github-integration-review-apps&quot;&gt;Heroku review apps&lt;/a&gt; were used on some teams sparingly.&lt;/p&gt;

&lt;a name=&quot;Enter.Kubernetes.and.Hokusai&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Enter Kubernetes and Hokusai&lt;/h3&gt;

&lt;p&gt;For many reasons outside of the scope of this post, Artsy began migrating
services off of Heroku and onto an AWS-backed Kubernetes (K8s) deployment model
starting in &lt;a href=&quot;https://github.com/artsy/force/pull/953&quot;&gt;February 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to allow application engineers to reasonably interface with K8s-backed
services, Artsy developed a command line interface,
&lt;a href=&quot;https://github.com/artsy/hokusai&quot;&gt;&lt;code&gt;hokusai&lt;/code&gt;&lt;/a&gt;, to provide a Heroku CLI-like interface for
configuring and deploying these services.&lt;/p&gt;

&lt;p&gt;Check out some &lt;a href=&quot;https://artsy.github.io/blog/2019/10/18/kubernetes-and-hokusai/&quot;&gt;prior&lt;/a&gt; &lt;a href=&quot;https://artsy.github.io/blog/2018/01/24/kubernetes-and-hokusai/&quot;&gt;posts&lt;/a&gt; discussing the experience of working with Kubernetes
and &lt;code&gt;hokusai&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;About a year after &lt;code&gt;hokusai&lt;/code&gt;&#39;s initial release, the tool released &lt;a href=&quot;https://github.com/artsy/hokusai/pull/62&quot;&gt;its initial
support for review apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Via subcommands within the &lt;code&gt;hokusai review_app&lt;/code&gt; namespace, developers were able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the needed K8s YAML configuration file from an existing staging configuration file&lt;/li&gt;
&lt;li&gt;Execute this configuration: creating a running server within a dedicated namespace&lt;/li&gt;
&lt;li&gt;Perform other server management tasks: re-deploying to the server, setting ENV variables, etc&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Problem:.More.Steps.Needed&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Problem: More Steps Needed&lt;/h3&gt;

&lt;p&gt;While &lt;code&gt;hokusai&lt;/code&gt;&#39;s official review app feature handles much of the core infrastructure
needed to get a service deployed to a new server, additional tasks are required
to have a working review app, which can be categorized into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Service Agnostic Tasks&lt;/p&gt;

&lt;p&gt; These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pushing a Docker image of the Git revision in question to the appropriate
Docker registry&lt;/li&gt;
&lt;li&gt;Editing the generated YAML configuration file to reference this Docker image&lt;/li&gt;
&lt;li&gt;Sourcing the appropriate ENV variables (typically from the shared staging
server)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Check out &lt;a href=&quot;https://github.com/artsy/hokusai/blob/master/docs/Review_Apps.md&quot;&gt;&lt;code&gt;hokusai&lt;/code&gt;&#39;s review app docs&lt;/a&gt; for more
 details.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Service Specific Tasks&lt;/p&gt;

&lt;p&gt; In addition, certain services have service-specific operational requirements that
 need to be met before a review app is fully functional.&lt;/p&gt;

&lt;p&gt; For example, in Force, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publish front-end assets to S3 for the specific revision being deployed, and&lt;/li&gt;
&lt;li&gt;Tweak some ENV variables from the values copied over from the shared staging
server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt;: Due to the manual labor required to (re)-learn and execute the
commands needed to build a review app, they were used sparingly by a few engineers
that already invested time in learning up on them.&lt;/p&gt;

&lt;a name=&quot;Solution:.A.bash.script&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Solution: A bash script&lt;/h3&gt;

&lt;p&gt;While these tasks described above are tedious, they don&#39;t really require a
decision-making human behind the computer and can be automated.&lt;/p&gt;

&lt;p&gt;In August 2019, we &lt;a href=&quot;https://github.com/artsy/force/pull/4412&quot;&gt;automated&lt;/a&gt; these tasks via a Bash script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt;: A developer is able take a Force commit and get it deployed to K8s
by running a single script on their laptop. Folks became excited about review
apps and started to use them more for Force development.&lt;/p&gt;

&lt;a name=&quot;Problem:.Depending.upon.a.developer.s.laptop.doesn.t.scale&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Problem: Depending upon a developer&#39;s laptop doesn&#39;t scale&lt;/h3&gt;

&lt;p&gt;The increased excitement and usage of review apps in Force revealed a new problem:&lt;/p&gt;

&lt;p&gt;Building and pushing &gt;2 GB Docker image across home WiFi networks can be incredibly
slow, decreasing the usefulness and adoption of the Bash script.&lt;/p&gt;

&lt;a name=&quot;Solution:.Run.the.bash.script.on.CI&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Solution: Run the bash script on CI&lt;/h3&gt;

&lt;p&gt;After discussions within Artsy&#39;s Platform Practice, a possible solution
emerged: build the review app by running this Bash script on CircleCI upon push
to a branch starting with &lt;code&gt;review-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that a developer&#39;s laptop is then only responsible for pushing a
commit to a branch and CircleCI does all the heavy lifting.&lt;/p&gt;

&lt;p&gt;Moreover, the process of centralizing the review app creation into CI helped us realize
the subsequent requirement: updating, not creating, review apps when a review app
already exists for a given branch.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/artsy/force/pull/5370&quot;&gt;pull request&lt;/a&gt; for the nitty gritty on how
we leveraged CircleCI branch filtering and more Bash to move this workload into
CircleCI and intelligently determine when to update or create a review app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt;: Any developer can spin up a Force review app in ~15 minutes on a &lt;code&gt;git push&lt;/code&gt;.
Review app are being used often for major and minor changes alike.&lt;/p&gt;

&lt;a name=&quot;Future.Iterations&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Future Iterations&lt;/h2&gt;

&lt;p&gt;Artsy has come far with its tooling for review applications, but, as always,
there&#39;s areas for us for to grow in, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Automating the de-provisioning of review apps that no
longer useful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automating the creation of DNS CNAME records within Cloudflare, removing one
final manual step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While the improvements to review app infrastructure has sparked similar
investments in other codebases, there&#39;s a lot of work we could do to bring
this Git-CircleCI-Bash based approach to other shared services we deploy at
Artsy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;On.Incremental.Improvement&quot;&gt;&lt;/a&gt;
&lt;h2&gt;On Incremental Improvement&lt;/h2&gt;

&lt;p&gt;One of Artsy&#39;s Engineering Principles is &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#incremental-revolution&quot;&gt;&quot;Incremental
Revolution&quot;&lt;/a&gt;, which begins with:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Introduce new technologies slowly and incrementally.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think Artsy&#39;s approach to review apps is a great example of this principle
implemented.&lt;/p&gt;

&lt;p&gt;As opposed to finding a silver bullet technology or strategy, our approach has
been to build off of a working current state, layering on a new component to
solve the next problem.&lt;/p&gt;

&lt;p&gt;At each point along our solution journey, we&#39;re left with a working and more valuable
solution to the problem at hand.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/08/21/review-apps-post/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/08/21/review-apps-post/</guid>
        
        
        <category>communication</category>
        
        <category>devops</category>
        
        <category>hokusai</category>
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>Improve Pull Requests By Including Valuable Context</title>
        <description>&lt;p&gt;Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. 😱 For many
teams this led to batching code reviews or even skipping them altogether. 😱😱&lt;/p&gt;

&lt;p&gt;Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it&#39;s convenient for the reviewer:
asynchronously. Asynchronous communication isn&#39;t all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;When you&#39;re in a synchronous conversation with someone, it doesn&#39;t take much time for them to let you know you&#39;ve
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.&lt;/p&gt;

&lt;p&gt;Worse, lack of context when &lt;em&gt;reviewing code&lt;/em&gt; asynchronously has a reverb effect. I create my PR when it&#39;s
convenient for me, you ask a clarifying question when it&#39;s convenient for you, I respond when it&#39;s convenient for
me, etc. Suddenly my PR has been open for three days and we haven&#39;t yet made it to a common understanding of why
I&#39;ve made these changes.&lt;/p&gt;

&lt;p&gt;It&#39;s extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.&lt;/p&gt;

&lt;p&gt;I&#39;m personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
&lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests&quot;&gt;some reading about how we work with PRs during their onboarding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.&lt;/p&gt;

&lt;a name=&quot;Explain.Your.Reasoning&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Explain Your Reasoning&lt;/h2&gt;

&lt;p&gt;You&#39;ve been thinking a lot about the problem you&#39;re solving - probably significantly more than your reviewers.
You&#39;ll save everyone time by describing the problem and sharing how you&#39;re thinking about it.&lt;/p&gt;

&lt;a name=&quot;Define.the.problem.and.solution&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Define the problem and solution&lt;/h3&gt;

&lt;p&gt;Why does this PR exist? Explain the problem it solves and describe your solution, as
&lt;a href=&quot;https://github.com/sweir27&quot;&gt;Sarah&lt;/a&gt; does &lt;a href=&quot;https://github.com/artsy/force/pull/3095&quot;&gt;in this PR&lt;/a&gt;. For bonus points,
include alternative approaches you considered.&lt;/p&gt;

&lt;p&gt;As you are writing up the problem and solution, you might find that you&#39;ve missed on the scope of your PR. Are
there &lt;em&gt;many&lt;/em&gt; problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.&lt;/p&gt;

&lt;a name=&quot;Explain.interesting.lines.of.code&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Explain interesting lines of code&lt;/h3&gt;

&lt;p&gt;The reviewers aren&#39;t the only ones who can comment on lines of code.
&lt;a href=&quot;https://github.com/artsy/emission/pull/2085#discussion_r378228269&quot;&gt;Give them&lt;/a&gt; some
&lt;a href=&quot;https://github.com/artsy/emission/pull/2085#discussion_r378230196&quot;&gt;additional information&lt;/a&gt; about
&lt;a href=&quot;https://github.com/artsy/emission/pull/2085#discussion_r378231974&quot;&gt;why a particular line was written&lt;/a&gt;, as
&lt;a href=&quot;https://github.com/ds300&quot;&gt;David&lt;/a&gt; does &lt;a href=&quot;https://github.com/artsy/emission/pull/2085&quot;&gt;in this PR&lt;/a&gt;. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren&#39;t obvious.&lt;/p&gt;

&lt;a name=&quot;Give.a.guided.tour.of.the.changes&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Give a guided tour of the changes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dblandin&quot;&gt;Devon&lt;/a&gt; takes the idea of adding context to individual lines to the next level
&lt;a href=&quot;https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754&quot;&gt;in this PR&lt;/a&gt;. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It&#39;s like he&#39;s sitting next to you!&lt;/p&gt;

&lt;a name=&quot;Show.Your.Work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Show Your Work&lt;/h2&gt;

&lt;p&gt;If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you&#39;ve worked through this problem thoroughly, and you&#39;ve
brought receipts.&lt;/p&gt;

&lt;a name=&quot;Make.small..self-contained.commits&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Make small, self-contained commits&lt;/h3&gt;

&lt;p&gt;A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
&lt;a href=&quot;https://github.com/artsy/convection/pull/645&quot;&gt;Here&#39;s a PR&lt;/a&gt; from &lt;a href=&quot;https://github.com/jonallured&quot;&gt;Jon&lt;/a&gt; that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bonus tip&lt;/em&gt;: it can be easier to review PRs with many small commits via the
&lt;a href=&quot;https://github.com/artsy/convection/pull/645/commits&quot;&gt;&lt;em&gt;Commits&lt;/em&gt;&lt;/a&gt; tab instead of the
&lt;a href=&quot;https://github.com/artsy/convection/pull/645/files&quot;&gt;&lt;em&gt;Files changed&lt;/em&gt;&lt;/a&gt; tab.&lt;/p&gt;

&lt;a name=&quot;Demonstrate.the.results&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Demonstrate the results&lt;/h3&gt;

&lt;p&gt;Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too 😬). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you&#39;ve verified your
changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/force/pull/5817&quot;&gt;Here&#39;s a PR&lt;/a&gt; from &lt;a href=&quot;https://github.com/ashleyjelks&quot;&gt;Ashley&lt;/a&gt; that includes
animated gifs of the changes she&#39;s made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.&lt;/p&gt;

&lt;a name=&quot;Document.the.unseen&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Document the unseen&lt;/h3&gt;

&lt;p&gt;Sometimes a PR&#39;s changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/eigen/pull/3206&quot;&gt;Here&#39;s a PR&lt;/a&gt; from &lt;a href=&quot;https://github.com/yuki24&quot;&gt;Yuki&lt;/a&gt; that not only
demonstrates what&#39;s happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xtina-starr&quot;&gt;Christina&lt;/a&gt; authored &lt;a href=&quot;https://github.com/artsy/reaction/pull/3441&quot;&gt;this PR&lt;/a&gt; which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.&lt;/p&gt;

&lt;a name=&quot;Share.your.progress&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Share your progress&lt;/h3&gt;

&lt;p&gt;One mistake many engineers make with non-trivial pull requests is to wait to open them until they&#39;re &quot;done&quot;. If
there are changes you&#39;d like to get people&#39;s eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put &lt;code&gt;WIP&lt;/code&gt; in the title. Extra work up front avoids rework by starting early discussions about
your approach.&lt;/p&gt;

&lt;p&gt;Let reviewers know in the body that your work isn&#39;t complete. As you continue your work, use a &lt;code&gt;TODO:&lt;/code&gt; list in the
body to illustrate your progress, as in &lt;a href=&quot;https://github.com/artsy/palette/pull/464&quot;&gt;this PR&lt;/a&gt; from
&lt;a href=&quot;https://github.com/sepans&quot;&gt;Sepand&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is this PR part of a larger scope of work? Is there followup work that will need to be done after it&#39;s merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.&lt;/p&gt;

&lt;a name=&quot;Spread.knowledge&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Spread knowledge&lt;/h2&gt;

&lt;p&gt;Pull requests should not be one-sided - they aren&#39;t just about collecting feedback from the reviewer. They&#39;re also
an opportunity to spread knowledge from the author.&lt;/p&gt;

&lt;a name=&quot;Share.your.learnings&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Share your learnings&lt;/h3&gt;

&lt;p&gt;Maybe you learned some things about the system you&#39;re working with, or you learned a new feature of the language.
Share this new information with your team. &lt;a href=&quot;https://github.com/anandaroop&quot;&gt;Roop&lt;/a&gt; shares some findings about
disabled tests &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/2130&quot;&gt;in this PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We introduced a new state management library shortly before &lt;a href=&quot;https://github.com/pepopowitz&quot;&gt;I&lt;/a&gt; opened
&lt;a href=&quot;https://github.com/artsy/eigen/pull/3526&quot;&gt;this PR&lt;/a&gt;, and I had to do some reading about how to add types to
something. I &lt;a href=&quot;https://github.com/artsy/eigen/pull/3526#discussion_r451161406&quot;&gt;shared my learnings with the team&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Share.development.tips&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Share development tips&lt;/h3&gt;

&lt;p&gt;Did you learn a new technique while building this feature? Share it with your team!&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/artsy/reaction/pull/3279#discussion_r395461329&quot;&gt;this PR&lt;/a&gt;,
&lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris&lt;/a&gt; shared with us his technique for grabbing fixture data from his locally running
environment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only &lt;em&gt;which&lt;/em&gt; decisions were made, but
&lt;em&gt;why&lt;/em&gt; they were made.&lt;/p&gt;

&lt;p&gt;If you&#39;d like to know more about how we work with pull requests at Artsy, take a look at our
&lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests&quot;&gt;&quot;Engineer workflow&quot; playbook&lt;/a&gt;,
or poke around &lt;a href=&quot;https://github.com/artsy&quot;&gt;our GitHub repositories&lt;/a&gt;. Check out
&lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/619&quot;&gt;the PR that created this article&lt;/a&gt;. And if you&#39;ve got examples
of great PRs to share with the rest of us, leave a comment!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/</guid>
        
        
        <category>community</category>
        
        <category>engineering</category>
        
        <category>github</category>
        
        <category>team</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>From engineering to product management, and back again</title>
        <description>&lt;p&gt;A year and a half ago I decided to become a product manager after 5 years as a software engineer. This past June,
however, I decided to switch back into engineering.&lt;/p&gt;

&lt;p&gt;What happened, and what did I learn?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.I.became.a.product.manager&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Why I became a product manager&lt;/h1&gt;

&lt;p&gt;When I started at Artsy, I hadn&#39;t planned on becoming a product manager. As I onboarded and worked on projects like
building Artsy&#39;s ecommerce backend &lt;a href=&quot;https://www.github.com/artsy/exchange&quot;&gt;Exchange&lt;/a&gt;, I found myself wanting to be
involved in the &quot;what&quot; and &quot;why&quot; of our product and not just the &quot;how.&quot; &lt;a href=&quot;https://willdoenlen.com&quot;&gt;I&#39;m an artist&lt;/a&gt;,
and so art and the art market are special topics for me. I felt like I would have more impact as a product manager,
and I definitely wanted to have greater impact on the art world.&lt;/p&gt;

&lt;p&gt;My previous job had me doing a blend of product management and engineering work, and so I had already had a taste
of PMing. I spoke with our VP of Product at the time and she agreed to let me try it out. And just like that, in
January 2019 I became the product manager for the Auctions team.&lt;/p&gt;

&lt;a name=&quot;Becoming.a.product.manager&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Becoming a product manager&lt;/h1&gt;

&lt;p&gt;Product management is a surprisingly difficult job to define. Everyone agrees on one thing: product managers lead
the product development process. However, what product development actually entails differs from company to company
because of differences in resources, culture and priorities. In practice, product managers may find themselves
doing a lot of things that on the surface have nothing to do with product development.&lt;/p&gt;

&lt;p&gt;Product management can be distilled down into two tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensuring that the right feature / product is being built for your users, and&lt;/li&gt;
&lt;li&gt;Doing whatever it takes to make (1) happen.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;A product manager&#39;s sole job is to do whatever it takes to make sure your users are getting the right product.
That&#39;ll almost certainly involve talking to users to understand their needs, analyzing product usage data and
working with your team and stakeholders to create the next great feature, but there&#39;s nothing in those two tasks
that says you need to do any of that. You can do this job any way you&#39;d like as long as you get results. If I knew
that I could have built a better product for my users by pogo sticking across the Brooklyn Bridge then you would
have found me out there pogo sticking all day, every day.&lt;/p&gt;

&lt;p&gt;All that to say, the job is highly ambiguous by design. &lt;strong&gt;Any problem could be your problem&lt;/strong&gt;, and it&#39;s up to you
to judge whether or not that&#39;s the best use of your time for your users.&lt;/p&gt;

&lt;a name=&quot;Redefining.work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Redefining work&lt;/h2&gt;

&lt;p&gt;Compared to engineering, this ambiguity was a huge shift for me. As an engineer, my thinking was previously limited
to our systems and our codebase, and I largely thought about &lt;em&gt;how&lt;/em&gt; to use them to build products. The &quot;how&quot; was now
largely abstracted away from me. It took me a long time to get out of that mindset, largely because I was
uncomfortable with how ambiguous PMing was.&lt;/p&gt;

&lt;p&gt;There are a few reasons why the ambiguity was uncomfortable. The first was that the actual output of a product
manager didn&#39;t &lt;em&gt;feel&lt;/em&gt; like work. As an engineer, you can write code and instantly see the results of your work.
There&#39;s a clear pipeline of progress, from initial commit to opening a pull request and deploying your code.&lt;/p&gt;

&lt;p&gt;As a product manager, though, your output is much more amorphous. You might spend your time reading up on user
feedback, or you might make docs or comment on other docs. You might spend your whole day in meetings talking about
the same thing over and over again with different groups of people. You might get interrupted repeatedly throughout
the day with questions and problems. Days would fly by and I would have no idea what I did even though I was busy
all day. I just couldn&#39;t get that feeling of progress.&lt;/p&gt;

&lt;p&gt;I worked through that by keeping a detailed journal. For the first three or four months I recorded what I was doing
every hour of every day. That practice gradually transformed into a more manageable daily journal as I got used to
the work style. No one ever saw those notes -- it was just so I could keep track of what I was doing, what I was
thinking about and feel some accomplishment by writing things down. It helped bridge the gap, and it&#39;s a practice I
still maintain.&lt;/p&gt;

&lt;p&gt;Another thing that helped me with the &quot;feeling&quot; of work was reading the perspectives of other managers. Andrew
Grove&#39;s &lt;em&gt;High Output Management&lt;/em&gt; was especially useful. Somewhere along the line I read the phrase &quot;the meeting
&lt;em&gt;is&lt;/em&gt; the work,&quot; and it clicked for me. A core output of my job was to communicate with others (more on that later).
As an engineer, it&#39;s counterintuitive. The more time you spend in a meeting, the less time you spend writing code.
Product managers need quiet thinking time too, but a significant portion of the job is working with others.
Meetings are how the work gets done. That framing helped me feel more productive.&lt;/p&gt;

&lt;p&gt;Compounding the problem of not knowing what work &quot;felt&quot; like was not really even knowing what my work was. Here&#39;s a
great journal entry from my second or third week as a PM:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What I don’t have clarity on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Am I taking on too much for the first quarter?&lt;/li&gt;
&lt;li&gt;How do I narrow down the work that I want to do next?&lt;/li&gt;
&lt;li&gt;How do I organize everything?&lt;/li&gt;
&lt;li&gt;What am I supposed to be doing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It felt as existential as it looked!&lt;/p&gt;

&lt;p&gt;Before I understood that part of my job was to systemtically remove any and every roadblock getting in the way of
shipping a great product, I tended to focus my energies solely on going through the product development cycle. I
could prioritize and propose a feature, but if something wasn&#39;t possible it just wasn&#39;t possible. As my
understanding evolved, though, I began to see that a lot of what wasn&#39;t possible actually &lt;em&gt;was&lt;/em&gt; possible. It just
depended on me creating change.&lt;/p&gt;

&lt;p&gt;Knowing that felt both enormously empowering and terrifying. If I was unclear before on what my job was, I felt
even less clear now that any problem could be my problem. But I got used to it, and over time and with coaching
from my manager I was able to suss out what not only &lt;em&gt;could&lt;/em&gt; be my problem but what &lt;em&gt;should&lt;/em&gt; be my problem. There
are some things nobody can change, but there&#39;s a surprising amount a single person can do. In the end, I think this
expansive view of work is the right framing for not only product management but really any job.&lt;/p&gt;

&lt;a name=&quot;From.data.paralyzed.to.data.informed&quot;&gt;&lt;/a&gt;
&lt;h2&gt;From data paralyzed to data informed&lt;/h2&gt;

&lt;p&gt;I studied a hard science in school and have always valued rigorous, quantitative reasoning. That kind of reasoning
is valuable in science and engineering, but when faced with the fuzzy world of business it can only take you so
far. The data you might want to make a decision frequently doesn&#39;t exist, and even if you can get it you probably
don&#39;t have the time to get it. I found myself initially in loops of analysis paralysis, struggling to find a
rigorous justification for why we should build what we were building.&lt;/p&gt;

&lt;p&gt;I found my way out of that loop by focusing on finding the best possible &lt;em&gt;outcome&lt;/em&gt;. Instead of getting caught up
trying to maximize my quantitative understanding of an opportunity, I focused on getting just enough information to
understand the relative upside and downside profiles of the opportunities in front of me. I used a rule of thumb
that 70% confidence is usually good enough to make a call. I didn&#39;t always know what the exact impact of a feature
would be, but I knew enough to know that whatever we were doing had the highest impact out of anything on the
table. That allowed me to make decisions with confidence.&lt;/p&gt;

&lt;p&gt;With that frame of mind, my quantitative skills turned into a huge asset instead of a hindrance. I feel confident
navigating Artsy&#39;s database and running my own SQL queries, which helped me work alongside our Data team to analyze
performance and potential impact for a new feature. And when that work was impossible, I was able to take the data
we had and still make an informed decision with it.&lt;/p&gt;

&lt;a name=&quot;Learning.to.focus.on.users&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Learning to focus on users&lt;/h2&gt;

&lt;p&gt;That style of thinking didn&#39;t just extend to &lt;em&gt;why&lt;/em&gt; we should build a feature, but also &lt;em&gt;what&lt;/em&gt; we should build. When
considering a feature, I found myself jumping immediately to how the feature would work on a systems level rather
than what the user experience should be. That was a double-edged sword. While it made discussions with the
engineers on my team seamless, I sometimes would rule out features in my head because I knew they &quot;weren&#39;t
possible.&quot; Of course, that did an injustice to both our users and the engineers on my team. Our users deserve the
best experience on Artsy, even if it feels impossible to me. And the engineers on my team could really find a
creative solution for just about anything I threw at them.&lt;/p&gt;

&lt;p&gt;Similar to my data paralysis, part of the problem here was that creating a great user experience was fuzzy for me,
and I subconsciously rejected fuzzy things because they didn&#39;t align with my version of rigorous knowledge. It was
easier for me think about systems than it was to think about creating a truly delightful user experience, and so I
thought about systems.&lt;/p&gt;

&lt;p&gt;That changed as I really dug into user needs. I cultivated user empathy to an entirely new level by immersing
myself in user feedback and user research. I began to really &lt;em&gt;feel&lt;/em&gt; that the choices we made impacted the
livelihoods and passions of collectors, institutions and artists. And that helped snap me out of it: our users
needed a better product, not better systems, and so I began to focus much more on how to make a better product.&lt;/p&gt;

&lt;p&gt;To understand how to build a better product, I spent a lot of time examining other products to understand what made
them compelling. How did a product meet users&#39; needs? How did it delight them? Where did it fall short? What would
I do to improve it? Doing this over and over again sharpened my product sense and made it easier to think through
how we could build a better experience for Artsy&#39;s users.&lt;/p&gt;

&lt;a name=&quot;Influence.and.communication&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Influence and communication&lt;/h2&gt;

&lt;p&gt;Influence is the currency of product managers. Good product managers work to expand their influence within an
organization so that they can quickly mobilize the organization towards the right goals. Since product managers
don&#39;t make anything themselves, a product manager that nobody listens to simply can&#39;t be effective.&lt;/p&gt;

&lt;p&gt;The interpersonal skills I had built up and practiced as a software engineer didn&#39;t directly translate to the
skills I needed to build influence. As a baseline, engineering communication requires precision and clarity of
thought. Since you&#39;re typically talking with other engineers, you have shared language and set of tools to help get
your point across. For example, if you can&#39;t succinctly express your idea in words you can just write that thought
out in code and other engineers will get it.&lt;/p&gt;

&lt;p&gt;Product managers work with a lot of different kinds of people: engineers, designers, marketers, sales people,
operations, executives, users, enterprise customers, vendors... the list goes on and on. Each person has a
different perspective, both from their organizational role and their own life experiences. You have to meet them
wherever they are, so your communication style needs to be highly adaptive.&lt;/p&gt;

&lt;p&gt;Good communication feels seamless but is typically accompanied by a lot of planning and foresight. There was a lot
I needed to learn to be an effective communicator and, in turn, an effective leader. How to write a good document,
how to run a meeting, how to craft a compelling story, how to be just the right amount of direct, how to be just
the right amount of concise... and, as a fairly verbal person how to draw good diagrams and pictures to communicate
my ideas. There&#39;s no shortcut to improving these skills. Getting better is a matter of practice and feedback.&lt;/p&gt;

&lt;a name=&quot;Learning.to.say.no&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Learning to say no&lt;/h2&gt;

&lt;p&gt;One of the most difficult things for me to learn was how and when to say &quot;no.&quot; As an engineer, I prided myself on
having a can-do attitude and making seemingly impossible things happen. As a product manager, though, I have to
make sure that we&#39;re always building the right thing for our users. Since my job is to make sure we&#39;re doing that,
I usually have conviction that we&#39;re currently doing the right thing. That means that, on average, when someone
requests product resources or proposes a new feature, I have to say no.&lt;/p&gt;

&lt;p&gt;I like to be helpful, and so I was terrible at saying no at first. I wanted to help anyone and everyone who came to
me because, like when I was an engineer, I wanted solve everyone&#39;s problems. But as I focused more and more on user
needs, it became clear what we should be working on to have the best impact on our users. That gave me the
conviction I needed to start saying no.&lt;/p&gt;

&lt;p&gt;That still didn&#39;t make it easier to &lt;em&gt;say&lt;/em&gt; no. Prioritization decisions can have a big impact on other teams, and
it&#39;s hard to see your coworkers feel disappointed when something they want won&#39;t be prioritized. Learning how to
say no kindly and empathetically is an art form. But in general, it&#39;s best done by clearly communicating priorities
and correctly setting expectations in the first place so that people don&#39;t come with requests that won&#39;t get
fulfilled. Doing that involves educating your coworkers on how the product prioritization process works,
socializing your product roadmap and spending lots of time to answer questions. It also may involve looping
stakeholders into the prioritization process so that their voices are clearly heard and they feel ownership over
the roadmap. It&#39;s much easier to get things done when everyone is in alignment from the beginning.&lt;/p&gt;

&lt;a name=&quot;Coming.back.to.engineering&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Coming back to engineering&lt;/h1&gt;

&lt;p&gt;After the first six months of working as a product manager I felt like I had gained my &quot;product legs.&quot; I had
launched some successful features, had weathered major organizational change and had a clear idea of what our users
needed and what the future ought to look like. Over the next year I continued to hone my skills and expand my scope
as a product manager. Overall, things were going well.&lt;/p&gt;

&lt;p&gt;I never stopped coding, though. I did small projects here and there, both inside and outside of work, but I never
really had the time to do anything big. After a year of being out of engineering I started to get an itch to build
and do technical work. I even had a few dreams where I was coding! I have dreams about all sorts of weird things
and don&#39;t dwell on them, but something about my surreal dream edition of Visual Studio Code stuck with me.&lt;/p&gt;

&lt;p&gt;I reflected on this more and looked through my personal journal to remember my prior experiences as an engineer,
when I&#39;ve felt happy and why I wanted to transition into product management. One thing I realized is that, as an
engineer, I didn&#39;t always feel empowered. I felt like my role was just to code. But having worked as a product
manager, I knew that it didn&#39;t have to be that way. I worked with engineers who had solid product skillsets and saw
how empowering and useful it could be. Being actively involved in coding and defining the right user experience
felt exciting to me.&lt;/p&gt;

&lt;p&gt;I also reflected on what kind of work I wanted to have and how I wanted to spend my time. In general, my favorite
days at work have been when I do a blend of people / business work and creative technical work. I enjoyed the
strategic and people-focused work of product management but I missed making things and technical problem solving.
While I did get to exercise technical thinking as a product manager it was rarely a good use of my time to go deep.
I realized I could achive that balance better as an empowered engineer rather than as a product manager.&lt;/p&gt;

&lt;p&gt;After a lot of thought, I decided that my longer term career direction made more sense as an engineering leader
rather than as a product leader. Fortunately, Artsy&#39;s leadership agreed to let me transition back into engineering,
and at the beginning of June I was re-minted as a software engineer.&lt;/p&gt;

&lt;a name=&quot;Onboarding.the.second.time&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Onboarding the second time&lt;/h2&gt;

&lt;p&gt;At this point, I&#39;m six weeks back into engineering and my experience feels very different than before. I&#39;ve spent
most of my time ramping up and onboarding for the second time. Relearning our stack has been both a humbling and
rewarding experience. I&#39;ve forgotten a lot of the details of the frameworks we use, but this time instead of racing
to get through tickets I&#39;ve decided to really slow down and take the time to read the docs and do tutorials to make
sure I fully understand what&#39;s going on. While it comes at the expense of speed in the short-term, it&#39;ll make me a
stronger engineer down the road, and I know that tradeoff is worth it. I also can&#39;t speak highly enough of my
fellow engineers, who have been incredibly supportive while I learn.&lt;/p&gt;

&lt;a name=&quot;Provide.value..not.code&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Provide value, not code&lt;/h2&gt;

&lt;p&gt;I&#39;ve also found my perspective is very different than before. While previously I would have seen my role as writing
great code, now I see my role as leveraging technology to provide value to users. What&#39;s the difference? In the
former, I&#39;m doing a &lt;em&gt;task&lt;/em&gt; while in the latter I&#39;m driving &lt;em&gt;outcomes&lt;/em&gt;. It feels much more empowering as a mental
model for what I should do as an engineer. It&#39;s also helped me shed any hint of perfectionism I had before since
writing &quot;perfect&quot; code or building the &quot;perfect&quot; system usually isn&#39;t relevant to providing value to our users.&lt;/p&gt;

&lt;a name=&quot;Developer.experience.is.a.product&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Developer experience is a product&lt;/h2&gt;

&lt;p&gt;Working as a product manager really taught me the value of engineering, which is frequently the bottleneck in
delivering value to your users. Creating the right strategy and vision for a product is critical work, but none of
that work matters if you can&#39;t quickly get it to market. The faster you can move the more quickly you can create
the ideal product your users want, which in turn dictates how successful your product will be. Gains in engineering
efficiency snowball into massive benefits for users over time.&lt;/p&gt;

&lt;p&gt;That&#39;s led me to start seeing our developer experience as part of our product. It&#39;s much more than just our
toolchain -- it&#39;s the end-to-end cycle of working with a designer and product manager to understand product
requirements to building the feature to shipping it and monitoring in production. What does the ideal process look
like? Where are our bottlenecks? What investments will result in the best outcome for our users? These are
questions I&#39;m asking myself as I ramp up, and I&#39;m excited to dig into this more.&lt;/p&gt;

&lt;a name=&quot;Should.you.be.a.product.manager.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Should you be a product manager?&lt;/h1&gt;

&lt;p&gt;If you&#39;re an engineer wondering whether to make the jump to product management, my advice is to try it out. Product
management and engineering are complementary skillsets that build off of each other. Knowing how to do one role
absolutely helps with the other. You may find that you love being a product manager and continue on that track, or
you may discover instead that you love being an engineer empowered with a product skillset. In either case, it&#39;ll
turn out great.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again/</link>
        <guid isPermaLink="true">https://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again/</guid>
        
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>people</category>
        
        <category>product management</category>
        
      </item>
    
  </channel>
</rss>
